// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/server.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fserver_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fserver_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_proto_2fserver_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fserver_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_proto_2fserver_2eproto;
class BlockChange;
struct BlockChangeDefaultTypeInternal;
extern BlockChangeDefaultTypeInternal _BlockChange_default_instance_;
class BlockData;
struct BlockDataDefaultTypeInternal;
extern BlockDataDefaultTypeInternal _BlockData_default_instance_;
class BlockDefine;
struct BlockDefineDefaultTypeInternal;
extern BlockDefineDefaultTypeInternal _BlockDefine_default_instance_;
class BlockDefineItem;
struct BlockDefineItemDefaultTypeInternal;
extern BlockDefineItemDefaultTypeInternal _BlockDefineItem_default_instance_;
class ChunkData;
struct ChunkDataDefaultTypeInternal;
extern ChunkDataDefaultTypeInternal _ChunkData_default_instance_;
class OnlineList;
struct OnlineListDefaultTypeInternal;
extern OnlineListDefaultTypeInternal _OnlineList_default_instance_;
class PlayerItem;
struct PlayerItemDefaultTypeInternal;
extern PlayerItemDefaultTypeInternal _PlayerItem_default_instance_;
class ServerStatus;
struct ServerStatusDefaultTypeInternal;
extern ServerStatusDefaultTypeInternal _ServerStatus_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class ServerStatus final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerStatus) */ {
 public:
  inline ServerStatus() : ServerStatus(nullptr) {}
  ~ServerStatus() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ServerStatus(::google::protobuf::internal::ConstantInitialized);

  inline ServerStatus(const ServerStatus& from)
      : ServerStatus(nullptr, from) {}
  ServerStatus(ServerStatus&& from) noexcept
    : ServerStatus() {
    *this = ::std::move(from);
  }

  inline ServerStatus& operator=(const ServerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerStatus& operator=(ServerStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerStatus* internal_default_instance() {
    return reinterpret_cast<const ServerStatus*>(
               &_ServerStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServerStatus& a, ServerStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerStatus* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServerStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ServerStatus& from) {
    ServerStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ServerStatus* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ServerStatus";
  }
  protected:
  explicit ServerStatus(::google::protobuf::Arena* arena);
  ServerStatus(::google::protobuf::Arena* arena, const ServerStatus& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kNameFieldNumber = 2,
    kMemoryTotalFieldNumber = 3,
    kMemoryUsedFieldNumber = 4,
    kMaxPlayersFieldNumber = 5,
    kOnlinePlayersFieldNumber = 6,
    kTpsFieldNumber = 7,
    kPingFieldNumber = 8,
  };
  // string version = 1;
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* value);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // uint64 memoryTotal = 3;
  void clear_memorytotal() ;
  ::uint64_t memorytotal() const;
  void set_memorytotal(::uint64_t value);

  private:
  ::uint64_t _internal_memorytotal() const;
  void _internal_set_memorytotal(::uint64_t value);

  public:
  // uint64 memoryUsed = 4;
  void clear_memoryused() ;
  ::uint64_t memoryused() const;
  void set_memoryused(::uint64_t value);

  private:
  ::uint64_t _internal_memoryused() const;
  void _internal_set_memoryused(::uint64_t value);

  public:
  // int64 maxPlayers = 5;
  void clear_maxplayers() ;
  ::int64_t maxplayers() const;
  void set_maxplayers(::int64_t value);

  private:
  ::int64_t _internal_maxplayers() const;
  void _internal_set_maxplayers(::int64_t value);

  public:
  // int64 onlinePlayers = 6;
  void clear_onlineplayers() ;
  ::int64_t onlineplayers() const;
  void set_onlineplayers(::int64_t value);

  private:
  ::int64_t _internal_onlineplayers() const;
  void _internal_set_onlineplayers(::int64_t value);

  public:
  // int64 tps = 7;
  void clear_tps() ;
  ::int64_t tps() const;
  void set_tps(::int64_t value);

  private:
  ::int64_t _internal_tps() const;
  void _internal_set_tps(::int64_t value);

  public:
  // uint32 ping = 8;
  void clear_ping() ;
  ::uint32_t ping() const;
  void set_ping(::uint32_t value);

  private:
  ::uint32_t _internal_ping() const;
  void _internal_set_ping(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ServerStatus)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 0,
      40, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr version_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::uint64_t memorytotal_;
    ::uint64_t memoryused_;
    ::int64_t maxplayers_;
    ::int64_t onlineplayers_;
    ::int64_t tps_;
    ::uint32_t ping_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fserver_2eproto;
};// -------------------------------------------------------------------

class PlayerItem final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PlayerItem) */ {
 public:
  inline PlayerItem() : PlayerItem(nullptr) {}
  ~PlayerItem() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PlayerItem(::google::protobuf::internal::ConstantInitialized);

  inline PlayerItem(const PlayerItem& from)
      : PlayerItem(nullptr, from) {}
  PlayerItem(PlayerItem&& from) noexcept
    : PlayerItem() {
    *this = ::std::move(from);
  }

  inline PlayerItem& operator=(const PlayerItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerItem& operator=(PlayerItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerItem* internal_default_instance() {
    return reinterpret_cast<const PlayerItem*>(
               &_PlayerItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PlayerItem& a, PlayerItem& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerItem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerItem* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerItem>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PlayerItem& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PlayerItem& from) {
    PlayerItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PlayerItem* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "PlayerItem";
  }
  protected:
  explicit PlayerItem(::google::protobuf::Arena* arena);
  PlayerItem(::google::protobuf::Arena* arena, const PlayerItem& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kPingFieldNumber = 3,
  };
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // int64 id = 1;
  void clear_id() ;
  ::int64_t id() const;
  void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // uint32 ping = 3;
  void clear_ping() ;
  ::uint32_t ping() const;
  void set_ping(::uint32_t value);

  private:
  ::uint32_t _internal_ping() const;
  void _internal_set_ping(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:PlayerItem)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      23, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int64_t id_;
    ::uint32_t ping_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fserver_2eproto;
};// -------------------------------------------------------------------

class BlockDefineItem final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BlockDefineItem) */ {
 public:
  inline BlockDefineItem() : BlockDefineItem(nullptr) {}
  ~BlockDefineItem() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BlockDefineItem(::google::protobuf::internal::ConstantInitialized);

  inline BlockDefineItem(const BlockDefineItem& from)
      : BlockDefineItem(nullptr, from) {}
  BlockDefineItem(BlockDefineItem&& from) noexcept
    : BlockDefineItem() {
    *this = ::std::move(from);
  }

  inline BlockDefineItem& operator=(const BlockDefineItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockDefineItem& operator=(BlockDefineItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockDefineItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockDefineItem* internal_default_instance() {
    return reinterpret_cast<const BlockDefineItem*>(
               &_BlockDefineItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BlockDefineItem& a, BlockDefineItem& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockDefineItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockDefineItem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockDefineItem* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockDefineItem>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BlockDefineItem& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BlockDefineItem& from) {
    BlockDefineItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BlockDefineItem* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "BlockDefineItem";
  }
  protected:
  explicit BlockDefineItem(::google::protobuf::Arena* arena);
  BlockDefineItem(::google::protobuf::Arena* arena, const BlockDefineItem& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockKeyFieldNumber = 2,
    kMaterialFieldNumber = 3,
    kBlockIdFieldNumber = 1,
  };
  // string block_key = 2;
  void clear_block_key() ;
  const std::string& block_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_block_key(Arg_&& arg, Args_... args);
  std::string* mutable_block_key();
  PROTOBUF_NODISCARD std::string* release_block_key();
  void set_allocated_block_key(std::string* value);

  private:
  const std::string& _internal_block_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_key(
      const std::string& value);
  std::string* _internal_mutable_block_key();

  public:
  // string material = 3;
  void clear_material() ;
  const std::string& material() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_material(Arg_&& arg, Args_... args);
  std::string* mutable_material();
  PROTOBUF_NODISCARD std::string* release_material();
  void set_allocated_material(std::string* value);

  private:
  const std::string& _internal_material() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_material(
      const std::string& value);
  std::string* _internal_mutable_material();

  public:
  // int64 block_id = 1;
  void clear_block_id() ;
  ::int64_t block_id() const;
  void set_block_id(::int64_t value);

  private:
  ::int64_t _internal_block_id() const;
  void _internal_set_block_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:BlockDefineItem)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      41, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr block_key_;
    ::google::protobuf::internal::ArenaStringPtr material_;
    ::int64_t block_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fserver_2eproto;
};// -------------------------------------------------------------------

class BlockData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BlockData) */ {
 public:
  inline BlockData() : BlockData(nullptr) {}
  ~BlockData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BlockData(::google::protobuf::internal::ConstantInitialized);

  inline BlockData(const BlockData& from)
      : BlockData(nullptr, from) {}
  BlockData(BlockData&& from) noexcept
    : BlockData() {
    *this = ::std::move(from);
  }

  inline BlockData& operator=(const BlockData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockData& operator=(BlockData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockData& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockData* internal_default_instance() {
    return reinterpret_cast<const BlockData*>(
               &_BlockData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BlockData& a, BlockData& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BlockData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BlockData& from) {
    BlockData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BlockData* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "BlockData";
  }
  protected:
  explicit BlockData(::google::protobuf::Arena* arena);
  BlockData(::google::protobuf::Arena* arena, const BlockData& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockIdFieldNumber = 1,
    kSubIdFieldNumber = 2,
  };
  // int64 block_id = 1;
  void clear_block_id() ;
  ::int64_t block_id() const;
  void set_block_id(::int64_t value);

  private:
  ::int64_t _internal_block_id() const;
  void _internal_set_block_id(::int64_t value);

  public:
  // int64 sub_id = 2;
  void clear_sub_id() ;
  ::int64_t sub_id() const;
  void set_sub_id(::int64_t value);

  private:
  ::int64_t _internal_sub_id() const;
  void _internal_set_sub_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:BlockData)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int64_t block_id_;
    ::int64_t sub_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fserver_2eproto;
};// -------------------------------------------------------------------

class BlockChange final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BlockChange) */ {
 public:
  inline BlockChange() : BlockChange(nullptr) {}
  ~BlockChange() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BlockChange(::google::protobuf::internal::ConstantInitialized);

  inline BlockChange(const BlockChange& from)
      : BlockChange(nullptr, from) {}
  BlockChange(BlockChange&& from) noexcept
    : BlockChange() {
    *this = ::std::move(from);
  }

  inline BlockChange& operator=(const BlockChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockChange& operator=(BlockChange&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockChange& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockChange* internal_default_instance() {
    return reinterpret_cast<const BlockChange*>(
               &_BlockChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BlockChange& a, BlockChange& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockChange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockChange* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockChange* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockChange>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BlockChange& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BlockChange& from) {
    BlockChange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BlockChange* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "BlockChange";
  }
  protected:
  explicit BlockChange(::google::protobuf::Arena* arena);
  BlockChange(::google::protobuf::Arena* arena, const BlockChange& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunkXFieldNumber = 1,
    kChunkYFieldNumber = 2,
    kChunkZFieldNumber = 3,
    kBlockXFieldNumber = 4,
    kBlockYFieldNumber = 5,
    kBlockZFieldNumber = 6,
    kBlockIdFieldNumber = 8,
    kSubIdFieldNumber = 9,
    kChangeTypeFieldNumber = 7,
  };
  // int32 chunk_x = 1;
  void clear_chunk_x() ;
  ::int32_t chunk_x() const;
  void set_chunk_x(::int32_t value);

  private:
  ::int32_t _internal_chunk_x() const;
  void _internal_set_chunk_x(::int32_t value);

  public:
  // int32 chunk_y = 2;
  void clear_chunk_y() ;
  ::int32_t chunk_y() const;
  void set_chunk_y(::int32_t value);

  private:
  ::int32_t _internal_chunk_y() const;
  void _internal_set_chunk_y(::int32_t value);

  public:
  // int32 chunk_z = 3;
  void clear_chunk_z() ;
  ::int32_t chunk_z() const;
  void set_chunk_z(::int32_t value);

  private:
  ::int32_t _internal_chunk_z() const;
  void _internal_set_chunk_z(::int32_t value);

  public:
  // int32 block_x = 4;
  void clear_block_x() ;
  ::int32_t block_x() const;
  void set_block_x(::int32_t value);

  private:
  ::int32_t _internal_block_x() const;
  void _internal_set_block_x(::int32_t value);

  public:
  // int32 block_y = 5;
  void clear_block_y() ;
  ::int32_t block_y() const;
  void set_block_y(::int32_t value);

  private:
  ::int32_t _internal_block_y() const;
  void _internal_set_block_y(::int32_t value);

  public:
  // int32 block_z = 6;
  void clear_block_z() ;
  ::int32_t block_z() const;
  void set_block_z(::int32_t value);

  private:
  ::int32_t _internal_block_z() const;
  void _internal_set_block_z(::int32_t value);

  public:
  // int64 block_id = 8;
  void clear_block_id() ;
  ::int64_t block_id() const;
  void set_block_id(::int64_t value);

  private:
  ::int64_t _internal_block_id() const;
  void _internal_set_block_id(::int64_t value);

  public:
  // int64 sub_id = 9;
  void clear_sub_id() ;
  ::int64_t sub_id() const;
  void set_sub_id(::int64_t value);

  private:
  ::int64_t _internal_sub_id() const;
  void _internal_set_sub_id(::int64_t value);

  public:
  // int32 change_type = 7;
  void clear_change_type() ;
  ::int32_t change_type() const;
  void set_change_type(::int32_t value);

  private:
  ::int32_t _internal_change_type() const;
  void _internal_set_change_type(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:BlockChange)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int32_t chunk_x_;
    ::int32_t chunk_y_;
    ::int32_t chunk_z_;
    ::int32_t block_x_;
    ::int32_t block_y_;
    ::int32_t block_z_;
    ::int64_t block_id_;
    ::int64_t sub_id_;
    ::int32_t change_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fserver_2eproto;
};// -------------------------------------------------------------------

class OnlineList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OnlineList) */ {
 public:
  inline OnlineList() : OnlineList(nullptr) {}
  ~OnlineList() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OnlineList(::google::protobuf::internal::ConstantInitialized);

  inline OnlineList(const OnlineList& from)
      : OnlineList(nullptr, from) {}
  OnlineList(OnlineList&& from) noexcept
    : OnlineList() {
    *this = ::std::move(from);
  }

  inline OnlineList& operator=(const OnlineList& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnlineList& operator=(OnlineList&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OnlineList& default_instance() {
    return *internal_default_instance();
  }
  static inline const OnlineList* internal_default_instance() {
    return reinterpret_cast<const OnlineList*>(
               &_OnlineList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(OnlineList& a, OnlineList& b) {
    a.Swap(&b);
  }
  inline void Swap(OnlineList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnlineList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OnlineList* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OnlineList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OnlineList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const OnlineList& from) {
    OnlineList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OnlineList* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "OnlineList";
  }
  protected:
  explicit OnlineList(::google::protobuf::Arena* arena);
  OnlineList(::google::protobuf::Arena* arena, const OnlineList& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
  };
  // repeated .PlayerItem players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;

  public:
  void clear_players() ;
  ::PlayerItem* mutable_players(int index);
  ::google::protobuf::RepeatedPtrField< ::PlayerItem >*
      mutable_players();
  private:
  const ::google::protobuf::RepeatedPtrField<::PlayerItem>& _internal_players() const;
  ::google::protobuf::RepeatedPtrField<::PlayerItem>* _internal_mutable_players();
  public:
  const ::PlayerItem& players(int index) const;
  ::PlayerItem* add_players();
  const ::google::protobuf::RepeatedPtrField< ::PlayerItem >&
      players() const;
  // @@protoc_insertion_point(class_scope:OnlineList)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::PlayerItem > players_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fserver_2eproto;
};// -------------------------------------------------------------------

class ChunkData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChunkData) */ {
 public:
  inline ChunkData() : ChunkData(nullptr) {}
  ~ChunkData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ChunkData(::google::protobuf::internal::ConstantInitialized);

  inline ChunkData(const ChunkData& from)
      : ChunkData(nullptr, from) {}
  ChunkData(ChunkData&& from) noexcept
    : ChunkData() {
    *this = ::std::move(from);
  }

  inline ChunkData& operator=(const ChunkData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkData& operator=(ChunkData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChunkData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChunkData* internal_default_instance() {
    return reinterpret_cast<const ChunkData*>(
               &_ChunkData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChunkData& a, ChunkData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChunkData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChunkData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChunkData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChunkData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ChunkData& from) {
    ChunkData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ChunkData* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ChunkData";
  }
  protected:
  explicit ChunkData(::google::protobuf::Arena* arena);
  ChunkData(::google::protobuf::Arena* arena, const ChunkData& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 5,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kWorldIdFieldNumber = 4,
    kZFieldNumber = 3,
  };
  // repeated .BlockData blocks = 5;
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;

  public:
  void clear_blocks() ;
  ::BlockData* mutable_blocks(int index);
  ::google::protobuf::RepeatedPtrField< ::BlockData >*
      mutable_blocks();
  private:
  const ::google::protobuf::RepeatedPtrField<::BlockData>& _internal_blocks() const;
  ::google::protobuf::RepeatedPtrField<::BlockData>* _internal_mutable_blocks();
  public:
  const ::BlockData& blocks(int index) const;
  ::BlockData* add_blocks();
  const ::google::protobuf::RepeatedPtrField< ::BlockData >&
      blocks() const;
  // int32 x = 1;
  void clear_x() ;
  ::int32_t x() const;
  void set_x(::int32_t value);

  private:
  ::int32_t _internal_x() const;
  void _internal_set_x(::int32_t value);

  public:
  // int32 y = 2;
  void clear_y() ;
  ::int32_t y() const;
  void set_y(::int32_t value);

  private:
  ::int32_t _internal_y() const;
  void _internal_set_y(::int32_t value);

  public:
  // int64 worldId = 4;
  void clear_worldid() ;
  ::int64_t worldid() const;
  void set_worldid(::int64_t value);

  private:
  ::int64_t _internal_worldid() const;
  void _internal_set_worldid(::int64_t value);

  public:
  // int32 z = 3;
  void clear_z() ;
  ::int32_t z() const;
  void set_z(::int32_t value);

  private:
  ::int32_t _internal_z() const;
  void _internal_set_z(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ChunkData)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::BlockData > blocks_;
    ::int32_t x_;
    ::int32_t y_;
    ::int64_t worldid_;
    ::int32_t z_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fserver_2eproto;
};// -------------------------------------------------------------------

class BlockDefine final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BlockDefine) */ {
 public:
  inline BlockDefine() : BlockDefine(nullptr) {}
  ~BlockDefine() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BlockDefine(::google::protobuf::internal::ConstantInitialized);

  inline BlockDefine(const BlockDefine& from)
      : BlockDefine(nullptr, from) {}
  BlockDefine(BlockDefine&& from) noexcept
    : BlockDefine() {
    *this = ::std::move(from);
  }

  inline BlockDefine& operator=(const BlockDefine& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockDefine& operator=(BlockDefine&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockDefine& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockDefine* internal_default_instance() {
    return reinterpret_cast<const BlockDefine*>(
               &_BlockDefine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BlockDefine& a, BlockDefine& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockDefine* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockDefine* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockDefine* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockDefine>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BlockDefine& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BlockDefine& from) {
    BlockDefine::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BlockDefine* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "BlockDefine";
  }
  protected:
  explicit BlockDefine(::google::protobuf::Arena* arena);
  BlockDefine(::google::protobuf::Arena* arena, const BlockDefine& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .BlockDefineItem items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::BlockDefineItem* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::BlockDefineItem >*
      mutable_items();
  private:
  const ::google::protobuf::RepeatedPtrField<::BlockDefineItem>& _internal_items() const;
  ::google::protobuf::RepeatedPtrField<::BlockDefineItem>* _internal_mutable_items();
  public:
  const ::BlockDefineItem& items(int index) const;
  ::BlockDefineItem* add_items();
  const ::google::protobuf::RepeatedPtrField< ::BlockDefineItem >&
      items() const;
  // @@protoc_insertion_point(class_scope:BlockDefine)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::BlockDefineItem > items_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fserver_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ServerStatus

// string version = 1;
inline void ServerStatus::clear_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.version_.ClearToEmpty();
}
inline const std::string& ServerStatus::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ServerStatus.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerStatus::set_version(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ServerStatus.version)
}
inline std::string* ServerStatus::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:ServerStatus.version)
  return _s;
}
inline const std::string& ServerStatus::_internal_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.version_.Get();
}
inline void ServerStatus::_internal_set_version(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.Set(value, GetArena());
}
inline std::string* ServerStatus::_internal_mutable_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.version_.Mutable( GetArena());
}
inline std::string* ServerStatus::release_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ServerStatus.version)
  return _impl_.version_.Release();
}
inline void ServerStatus::set_allocated_version(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.version_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ServerStatus.version)
}

// string name = 2;
inline void ServerStatus::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ServerStatus::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ServerStatus.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerStatus::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ServerStatus.name)
}
inline std::string* ServerStatus::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ServerStatus.name)
  return _s;
}
inline const std::string& ServerStatus::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void ServerStatus::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* ServerStatus::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* ServerStatus::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ServerStatus.name)
  return _impl_.name_.Release();
}
inline void ServerStatus::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ServerStatus.name)
}

// uint64 memoryTotal = 3;
inline void ServerStatus::clear_memorytotal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.memorytotal_ = ::uint64_t{0u};
}
inline ::uint64_t ServerStatus::memorytotal() const {
  // @@protoc_insertion_point(field_get:ServerStatus.memoryTotal)
  return _internal_memorytotal();
}
inline void ServerStatus::set_memorytotal(::uint64_t value) {
  _internal_set_memorytotal(value);
  // @@protoc_insertion_point(field_set:ServerStatus.memoryTotal)
}
inline ::uint64_t ServerStatus::_internal_memorytotal() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.memorytotal_;
}
inline void ServerStatus::_internal_set_memorytotal(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.memorytotal_ = value;
}

// uint64 memoryUsed = 4;
inline void ServerStatus::clear_memoryused() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.memoryused_ = ::uint64_t{0u};
}
inline ::uint64_t ServerStatus::memoryused() const {
  // @@protoc_insertion_point(field_get:ServerStatus.memoryUsed)
  return _internal_memoryused();
}
inline void ServerStatus::set_memoryused(::uint64_t value) {
  _internal_set_memoryused(value);
  // @@protoc_insertion_point(field_set:ServerStatus.memoryUsed)
}
inline ::uint64_t ServerStatus::_internal_memoryused() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.memoryused_;
}
inline void ServerStatus::_internal_set_memoryused(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.memoryused_ = value;
}

// int64 maxPlayers = 5;
inline void ServerStatus::clear_maxplayers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.maxplayers_ = ::int64_t{0};
}
inline ::int64_t ServerStatus::maxplayers() const {
  // @@protoc_insertion_point(field_get:ServerStatus.maxPlayers)
  return _internal_maxplayers();
}
inline void ServerStatus::set_maxplayers(::int64_t value) {
  _internal_set_maxplayers(value);
  // @@protoc_insertion_point(field_set:ServerStatus.maxPlayers)
}
inline ::int64_t ServerStatus::_internal_maxplayers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.maxplayers_;
}
inline void ServerStatus::_internal_set_maxplayers(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.maxplayers_ = value;
}

// int64 onlinePlayers = 6;
inline void ServerStatus::clear_onlineplayers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.onlineplayers_ = ::int64_t{0};
}
inline ::int64_t ServerStatus::onlineplayers() const {
  // @@protoc_insertion_point(field_get:ServerStatus.onlinePlayers)
  return _internal_onlineplayers();
}
inline void ServerStatus::set_onlineplayers(::int64_t value) {
  _internal_set_onlineplayers(value);
  // @@protoc_insertion_point(field_set:ServerStatus.onlinePlayers)
}
inline ::int64_t ServerStatus::_internal_onlineplayers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.onlineplayers_;
}
inline void ServerStatus::_internal_set_onlineplayers(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.onlineplayers_ = value;
}

// int64 tps = 7;
inline void ServerStatus::clear_tps() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tps_ = ::int64_t{0};
}
inline ::int64_t ServerStatus::tps() const {
  // @@protoc_insertion_point(field_get:ServerStatus.tps)
  return _internal_tps();
}
inline void ServerStatus::set_tps(::int64_t value) {
  _internal_set_tps(value);
  // @@protoc_insertion_point(field_set:ServerStatus.tps)
}
inline ::int64_t ServerStatus::_internal_tps() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tps_;
}
inline void ServerStatus::_internal_set_tps(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tps_ = value;
}

// uint32 ping = 8;
inline void ServerStatus::clear_ping() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ping_ = 0u;
}
inline ::uint32_t ServerStatus::ping() const {
  // @@protoc_insertion_point(field_get:ServerStatus.ping)
  return _internal_ping();
}
inline void ServerStatus::set_ping(::uint32_t value) {
  _internal_set_ping(value);
  // @@protoc_insertion_point(field_set:ServerStatus.ping)
}
inline ::uint32_t ServerStatus::_internal_ping() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ping_;
}
inline void ServerStatus::_internal_set_ping(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ping_ = value;
}

// -------------------------------------------------------------------

// BlockDefineItem

// int64 block_id = 1;
inline void BlockDefineItem::clear_block_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.block_id_ = ::int64_t{0};
}
inline ::int64_t BlockDefineItem::block_id() const {
  // @@protoc_insertion_point(field_get:BlockDefineItem.block_id)
  return _internal_block_id();
}
inline void BlockDefineItem::set_block_id(::int64_t value) {
  _internal_set_block_id(value);
  // @@protoc_insertion_point(field_set:BlockDefineItem.block_id)
}
inline ::int64_t BlockDefineItem::_internal_block_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.block_id_;
}
inline void BlockDefineItem::_internal_set_block_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.block_id_ = value;
}

// string block_key = 2;
inline void BlockDefineItem::clear_block_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.block_key_.ClearToEmpty();
}
inline const std::string& BlockDefineItem::block_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:BlockDefineItem.block_key)
  return _internal_block_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BlockDefineItem::set_block_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.block_key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:BlockDefineItem.block_key)
}
inline std::string* BlockDefineItem::mutable_block_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_block_key();
  // @@protoc_insertion_point(field_mutable:BlockDefineItem.block_key)
  return _s;
}
inline const std::string& BlockDefineItem::_internal_block_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.block_key_.Get();
}
inline void BlockDefineItem::_internal_set_block_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.block_key_.Set(value, GetArena());
}
inline std::string* BlockDefineItem::_internal_mutable_block_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.block_key_.Mutable( GetArena());
}
inline std::string* BlockDefineItem::release_block_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:BlockDefineItem.block_key)
  return _impl_.block_key_.Release();
}
inline void BlockDefineItem::set_allocated_block_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.block_key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.block_key_.IsDefault()) {
          _impl_.block_key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BlockDefineItem.block_key)
}

// string material = 3;
inline void BlockDefineItem::clear_material() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.material_.ClearToEmpty();
}
inline const std::string& BlockDefineItem::material() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:BlockDefineItem.material)
  return _internal_material();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BlockDefineItem::set_material(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.material_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:BlockDefineItem.material)
}
inline std::string* BlockDefineItem::mutable_material() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_material();
  // @@protoc_insertion_point(field_mutable:BlockDefineItem.material)
  return _s;
}
inline const std::string& BlockDefineItem::_internal_material() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.material_.Get();
}
inline void BlockDefineItem::_internal_set_material(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.material_.Set(value, GetArena());
}
inline std::string* BlockDefineItem::_internal_mutable_material() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.material_.Mutable( GetArena());
}
inline std::string* BlockDefineItem::release_material() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:BlockDefineItem.material)
  return _impl_.material_.Release();
}
inline void BlockDefineItem::set_allocated_material(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.material_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.material_.IsDefault()) {
          _impl_.material_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BlockDefineItem.material)
}

// -------------------------------------------------------------------

// BlockDefine

// repeated .BlockDefineItem items = 1;
inline int BlockDefine::_internal_items_size() const {
  return _internal_items().size();
}
inline int BlockDefine::items_size() const {
  return _internal_items_size();
}
inline void BlockDefine::clear_items() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.items_.Clear();
}
inline ::BlockDefineItem* BlockDefine::mutable_items(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:BlockDefine.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::BlockDefineItem>* BlockDefine::mutable_items()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:BlockDefine.items)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_items();
}
inline const ::BlockDefineItem& BlockDefine::items(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:BlockDefine.items)
  return _internal_items().Get(index);
}
inline ::BlockDefineItem* BlockDefine::add_items() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::BlockDefineItem* _add = _internal_mutable_items()->Add();
  // @@protoc_insertion_point(field_add:BlockDefine.items)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::BlockDefineItem>& BlockDefine::items() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:BlockDefine.items)
  return _internal_items();
}
inline const ::google::protobuf::RepeatedPtrField<::BlockDefineItem>&
BlockDefine::_internal_items() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.items_;
}
inline ::google::protobuf::RepeatedPtrField<::BlockDefineItem>*
BlockDefine::_internal_mutable_items() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// BlockData

// int64 block_id = 1;
inline void BlockData::clear_block_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.block_id_ = ::int64_t{0};
}
inline ::int64_t BlockData::block_id() const {
  // @@protoc_insertion_point(field_get:BlockData.block_id)
  return _internal_block_id();
}
inline void BlockData::set_block_id(::int64_t value) {
  _internal_set_block_id(value);
  // @@protoc_insertion_point(field_set:BlockData.block_id)
}
inline ::int64_t BlockData::_internal_block_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.block_id_;
}
inline void BlockData::_internal_set_block_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.block_id_ = value;
}

// int64 sub_id = 2;
inline void BlockData::clear_sub_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sub_id_ = ::int64_t{0};
}
inline ::int64_t BlockData::sub_id() const {
  // @@protoc_insertion_point(field_get:BlockData.sub_id)
  return _internal_sub_id();
}
inline void BlockData::set_sub_id(::int64_t value) {
  _internal_set_sub_id(value);
  // @@protoc_insertion_point(field_set:BlockData.sub_id)
}
inline ::int64_t BlockData::_internal_sub_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sub_id_;
}
inline void BlockData::_internal_set_sub_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sub_id_ = value;
}

// -------------------------------------------------------------------

// ChunkData

// int32 x = 1;
inline void ChunkData::clear_x() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.x_ = 0;
}
inline ::int32_t ChunkData::x() const {
  // @@protoc_insertion_point(field_get:ChunkData.x)
  return _internal_x();
}
inline void ChunkData::set_x(::int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ChunkData.x)
}
inline ::int32_t ChunkData::_internal_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.x_;
}
inline void ChunkData::_internal_set_x(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.x_ = value;
}

// int32 y = 2;
inline void ChunkData::clear_y() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.y_ = 0;
}
inline ::int32_t ChunkData::y() const {
  // @@protoc_insertion_point(field_get:ChunkData.y)
  return _internal_y();
}
inline void ChunkData::set_y(::int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ChunkData.y)
}
inline ::int32_t ChunkData::_internal_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.y_;
}
inline void ChunkData::_internal_set_y(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.y_ = value;
}

// int32 z = 3;
inline void ChunkData::clear_z() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.z_ = 0;
}
inline ::int32_t ChunkData::z() const {
  // @@protoc_insertion_point(field_get:ChunkData.z)
  return _internal_z();
}
inline void ChunkData::set_z(::int32_t value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:ChunkData.z)
}
inline ::int32_t ChunkData::_internal_z() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.z_;
}
inline void ChunkData::_internal_set_z(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.z_ = value;
}

// int64 worldId = 4;
inline void ChunkData::clear_worldid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.worldid_ = ::int64_t{0};
}
inline ::int64_t ChunkData::worldid() const {
  // @@protoc_insertion_point(field_get:ChunkData.worldId)
  return _internal_worldid();
}
inline void ChunkData::set_worldid(::int64_t value) {
  _internal_set_worldid(value);
  // @@protoc_insertion_point(field_set:ChunkData.worldId)
}
inline ::int64_t ChunkData::_internal_worldid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.worldid_;
}
inline void ChunkData::_internal_set_worldid(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.worldid_ = value;
}

// repeated .BlockData blocks = 5;
inline int ChunkData::_internal_blocks_size() const {
  return _internal_blocks().size();
}
inline int ChunkData::blocks_size() const {
  return _internal_blocks_size();
}
inline void ChunkData::clear_blocks() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.blocks_.Clear();
}
inline ::BlockData* ChunkData::mutable_blocks(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ChunkData.blocks)
  return _internal_mutable_blocks()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::BlockData>* ChunkData::mutable_blocks()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ChunkData.blocks)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_blocks();
}
inline const ::BlockData& ChunkData::blocks(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ChunkData.blocks)
  return _internal_blocks().Get(index);
}
inline ::BlockData* ChunkData::add_blocks() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::BlockData* _add = _internal_mutable_blocks()->Add();
  // @@protoc_insertion_point(field_add:ChunkData.blocks)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::BlockData>& ChunkData::blocks() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ChunkData.blocks)
  return _internal_blocks();
}
inline const ::google::protobuf::RepeatedPtrField<::BlockData>&
ChunkData::_internal_blocks() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.blocks_;
}
inline ::google::protobuf::RepeatedPtrField<::BlockData>*
ChunkData::_internal_mutable_blocks() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.blocks_;
}

// -------------------------------------------------------------------

// PlayerItem

// int64 id = 1;
inline void PlayerItem::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = ::int64_t{0};
}
inline ::int64_t PlayerItem::id() const {
  // @@protoc_insertion_point(field_get:PlayerItem.id)
  return _internal_id();
}
inline void PlayerItem::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PlayerItem.id)
}
inline ::int64_t PlayerItem::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void PlayerItem::_internal_set_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// string name = 2;
inline void PlayerItem::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PlayerItem::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PlayerItem.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PlayerItem::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PlayerItem.name)
}
inline std::string* PlayerItem::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:PlayerItem.name)
  return _s;
}
inline const std::string& PlayerItem::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void PlayerItem::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* PlayerItem::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* PlayerItem::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PlayerItem.name)
  return _impl_.name_.Release();
}
inline void PlayerItem::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PlayerItem.name)
}

// uint32 ping = 3;
inline void PlayerItem::clear_ping() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ping_ = 0u;
}
inline ::uint32_t PlayerItem::ping() const {
  // @@protoc_insertion_point(field_get:PlayerItem.ping)
  return _internal_ping();
}
inline void PlayerItem::set_ping(::uint32_t value) {
  _internal_set_ping(value);
  // @@protoc_insertion_point(field_set:PlayerItem.ping)
}
inline ::uint32_t PlayerItem::_internal_ping() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ping_;
}
inline void PlayerItem::_internal_set_ping(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ping_ = value;
}

// -------------------------------------------------------------------

// OnlineList

// repeated .PlayerItem players = 1;
inline int OnlineList::_internal_players_size() const {
  return _internal_players().size();
}
inline int OnlineList::players_size() const {
  return _internal_players_size();
}
inline void OnlineList::clear_players() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.players_.Clear();
}
inline ::PlayerItem* OnlineList::mutable_players(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:OnlineList.players)
  return _internal_mutable_players()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::PlayerItem>* OnlineList::mutable_players()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:OnlineList.players)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_players();
}
inline const ::PlayerItem& OnlineList::players(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:OnlineList.players)
  return _internal_players().Get(index);
}
inline ::PlayerItem* OnlineList::add_players() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::PlayerItem* _add = _internal_mutable_players()->Add();
  // @@protoc_insertion_point(field_add:OnlineList.players)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::PlayerItem>& OnlineList::players() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:OnlineList.players)
  return _internal_players();
}
inline const ::google::protobuf::RepeatedPtrField<::PlayerItem>&
OnlineList::_internal_players() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.players_;
}
inline ::google::protobuf::RepeatedPtrField<::PlayerItem>*
OnlineList::_internal_mutable_players() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.players_;
}

// -------------------------------------------------------------------

// BlockChange

// int32 chunk_x = 1;
inline void BlockChange::clear_chunk_x() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.chunk_x_ = 0;
}
inline ::int32_t BlockChange::chunk_x() const {
  // @@protoc_insertion_point(field_get:BlockChange.chunk_x)
  return _internal_chunk_x();
}
inline void BlockChange::set_chunk_x(::int32_t value) {
  _internal_set_chunk_x(value);
  // @@protoc_insertion_point(field_set:BlockChange.chunk_x)
}
inline ::int32_t BlockChange::_internal_chunk_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.chunk_x_;
}
inline void BlockChange::_internal_set_chunk_x(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.chunk_x_ = value;
}

// int32 chunk_y = 2;
inline void BlockChange::clear_chunk_y() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.chunk_y_ = 0;
}
inline ::int32_t BlockChange::chunk_y() const {
  // @@protoc_insertion_point(field_get:BlockChange.chunk_y)
  return _internal_chunk_y();
}
inline void BlockChange::set_chunk_y(::int32_t value) {
  _internal_set_chunk_y(value);
  // @@protoc_insertion_point(field_set:BlockChange.chunk_y)
}
inline ::int32_t BlockChange::_internal_chunk_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.chunk_y_;
}
inline void BlockChange::_internal_set_chunk_y(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.chunk_y_ = value;
}

// int32 chunk_z = 3;
inline void BlockChange::clear_chunk_z() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.chunk_z_ = 0;
}
inline ::int32_t BlockChange::chunk_z() const {
  // @@protoc_insertion_point(field_get:BlockChange.chunk_z)
  return _internal_chunk_z();
}
inline void BlockChange::set_chunk_z(::int32_t value) {
  _internal_set_chunk_z(value);
  // @@protoc_insertion_point(field_set:BlockChange.chunk_z)
}
inline ::int32_t BlockChange::_internal_chunk_z() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.chunk_z_;
}
inline void BlockChange::_internal_set_chunk_z(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.chunk_z_ = value;
}

// int32 block_x = 4;
inline void BlockChange::clear_block_x() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.block_x_ = 0;
}
inline ::int32_t BlockChange::block_x() const {
  // @@protoc_insertion_point(field_get:BlockChange.block_x)
  return _internal_block_x();
}
inline void BlockChange::set_block_x(::int32_t value) {
  _internal_set_block_x(value);
  // @@protoc_insertion_point(field_set:BlockChange.block_x)
}
inline ::int32_t BlockChange::_internal_block_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.block_x_;
}
inline void BlockChange::_internal_set_block_x(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.block_x_ = value;
}

// int32 block_y = 5;
inline void BlockChange::clear_block_y() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.block_y_ = 0;
}
inline ::int32_t BlockChange::block_y() const {
  // @@protoc_insertion_point(field_get:BlockChange.block_y)
  return _internal_block_y();
}
inline void BlockChange::set_block_y(::int32_t value) {
  _internal_set_block_y(value);
  // @@protoc_insertion_point(field_set:BlockChange.block_y)
}
inline ::int32_t BlockChange::_internal_block_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.block_y_;
}
inline void BlockChange::_internal_set_block_y(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.block_y_ = value;
}

// int32 block_z = 6;
inline void BlockChange::clear_block_z() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.block_z_ = 0;
}
inline ::int32_t BlockChange::block_z() const {
  // @@protoc_insertion_point(field_get:BlockChange.block_z)
  return _internal_block_z();
}
inline void BlockChange::set_block_z(::int32_t value) {
  _internal_set_block_z(value);
  // @@protoc_insertion_point(field_set:BlockChange.block_z)
}
inline ::int32_t BlockChange::_internal_block_z() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.block_z_;
}
inline void BlockChange::_internal_set_block_z(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.block_z_ = value;
}

// int32 change_type = 7;
inline void BlockChange::clear_change_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.change_type_ = 0;
}
inline ::int32_t BlockChange::change_type() const {
  // @@protoc_insertion_point(field_get:BlockChange.change_type)
  return _internal_change_type();
}
inline void BlockChange::set_change_type(::int32_t value) {
  _internal_set_change_type(value);
  // @@protoc_insertion_point(field_set:BlockChange.change_type)
}
inline ::int32_t BlockChange::_internal_change_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.change_type_;
}
inline void BlockChange::_internal_set_change_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.change_type_ = value;
}

// int64 block_id = 8;
inline void BlockChange::clear_block_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.block_id_ = ::int64_t{0};
}
inline ::int64_t BlockChange::block_id() const {
  // @@protoc_insertion_point(field_get:BlockChange.block_id)
  return _internal_block_id();
}
inline void BlockChange::set_block_id(::int64_t value) {
  _internal_set_block_id(value);
  // @@protoc_insertion_point(field_set:BlockChange.block_id)
}
inline ::int64_t BlockChange::_internal_block_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.block_id_;
}
inline void BlockChange::_internal_set_block_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.block_id_ = value;
}

// int64 sub_id = 9;
inline void BlockChange::clear_sub_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sub_id_ = ::int64_t{0};
}
inline ::int64_t BlockChange::sub_id() const {
  // @@protoc_insertion_point(field_get:BlockChange.sub_id)
  return _internal_sub_id();
}
inline void BlockChange::set_sub_id(::int64_t value) {
  _internal_set_sub_id(value);
  // @@protoc_insertion_point(field_set:BlockChange.sub_id)
}
inline ::int64_t BlockChange::_internal_sub_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sub_id_;
}
inline void BlockChange::_internal_set_sub_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sub_id_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_proto_2fserver_2eproto_2epb_2eh
