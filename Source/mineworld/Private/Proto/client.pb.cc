// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/client.proto

#include "proto/client.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr PlayerMove::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : chunk_x_{0},
        chunk_y_{0},
        chunk_z_{0},
        x_{0},
        y_{0},
        z_{0},
        yaw_{0},
        pitch_{0},
        head_yaw_{0},
        player_id_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PlayerMove::PlayerMove(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PlayerMoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerMoveDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerMoveDefaultTypeInternal() {}
  union {
    PlayerMove _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerMoveDefaultTypeInternal _PlayerMove_default_instance_;

inline constexpr PlayerControlEntity::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : target_id_{::int64_t{0}},
        type_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PlayerControlEntity::PlayerControlEntity(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PlayerControlEntityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerControlEntityDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerControlEntityDefaultTypeInternal() {}
  union {
    PlayerControlEntity _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerControlEntityDefaultTypeInternal _PlayerControlEntity_default_instance_;

inline constexpr PlayerControlBlock::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : type_{0},
        chunk_x_{0},
        chunk_y_{0},
        chunk_z_{0},
        block_x_{0},
        block_y_{0},
        block_z_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PlayerControlBlock::PlayerControlBlock(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PlayerControlBlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerControlBlockDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerControlBlockDefaultTypeInternal() {}
  union {
    PlayerControlBlock _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerControlBlockDefaultTypeInternal _PlayerControlBlock_default_instance_;
static ::_pb::Metadata file_level_metadata_proto_2fclient_2eproto[3];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_proto_2fclient_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_proto_2fclient_2eproto = nullptr;
const ::uint32_t TableStruct_proto_2fclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::PlayerMove, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::PlayerMove, _impl_.chunk_x_),
    PROTOBUF_FIELD_OFFSET(::PlayerMove, _impl_.chunk_y_),
    PROTOBUF_FIELD_OFFSET(::PlayerMove, _impl_.chunk_z_),
    PROTOBUF_FIELD_OFFSET(::PlayerMove, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::PlayerMove, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::PlayerMove, _impl_.z_),
    PROTOBUF_FIELD_OFFSET(::PlayerMove, _impl_.yaw_),
    PROTOBUF_FIELD_OFFSET(::PlayerMove, _impl_.pitch_),
    PROTOBUF_FIELD_OFFSET(::PlayerMove, _impl_.head_yaw_),
    PROTOBUF_FIELD_OFFSET(::PlayerMove, _impl_.player_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::PlayerControlBlock, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::PlayerControlBlock, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::PlayerControlBlock, _impl_.chunk_x_),
    PROTOBUF_FIELD_OFFSET(::PlayerControlBlock, _impl_.chunk_y_),
    PROTOBUF_FIELD_OFFSET(::PlayerControlBlock, _impl_.chunk_z_),
    PROTOBUF_FIELD_OFFSET(::PlayerControlBlock, _impl_.block_x_),
    PROTOBUF_FIELD_OFFSET(::PlayerControlBlock, _impl_.block_y_),
    PROTOBUF_FIELD_OFFSET(::PlayerControlBlock, _impl_.block_z_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::PlayerControlEntity, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::PlayerControlEntity, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::PlayerControlEntity, _impl_.target_id_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::PlayerMove)},
        {18, -1, -1, sizeof(::PlayerControlBlock)},
        {33, -1, -1, sizeof(::PlayerControlEntity)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_PlayerMove_default_instance_._instance,
    &::_PlayerControlBlock_default_instance_._instance,
    &::_PlayerControlEntity_default_instance_._instance,
};
const char descriptor_table_protodef_proto_2fclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\022proto/client.proto\"\241\001\n\nPlayerMove\022\017\n\007c"
    "hunk_x\030\001 \001(\005\022\017\n\007chunk_y\030\002 \001(\005\022\017\n\007chunk_z"
    "\030\003 \001(\005\022\t\n\001x\030\004 \001(\002\022\t\n\001y\030\005 \001(\002\022\t\n\001z\030\006 \001(\002\022"
    "\013\n\003yaw\030\007 \001(\002\022\r\n\005pitch\030\010 \001(\002\022\020\n\010head_yaw\030"
    "\t \001(\002\022\021\n\tplayer_id\030\n \001(\r\"\210\001\n\022PlayerContr"
    "olBlock\022\014\n\004type\030\001 \001(\005\022\017\n\007chunk_x\030\002 \001(\005\022\017"
    "\n\007chunk_y\030\003 \001(\005\022\017\n\007chunk_z\030\004 \001(\005\022\017\n\007bloc"
    "k_x\030\005 \001(\005\022\017\n\007block_y\030\006 \001(\005\022\017\n\007block_z\030\007 "
    "\001(\005\"6\n\023PlayerControlEntity\022\014\n\004type\030\001 \001(\005"
    "\022\021\n\ttarget_id\030\002 \001(\003B\003\370\001\001b\006proto3"
};
static ::absl::once_flag descriptor_table_proto_2fclient_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto_2fclient_2eproto = {
    false,
    false,
    392,
    descriptor_table_protodef_proto_2fclient_2eproto,
    "proto/client.proto",
    &descriptor_table_proto_2fclient_2eproto_once,
    nullptr,
    0,
    3,
    schemas,
    file_default_instances,
    TableStruct_proto_2fclient_2eproto::offsets,
    file_level_metadata_proto_2fclient_2eproto,
    file_level_enum_descriptors_proto_2fclient_2eproto,
    file_level_service_descriptors_proto_2fclient_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto_2fclient_2eproto_getter() {
  return &descriptor_table_proto_2fclient_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto_2fclient_2eproto(&descriptor_table_proto_2fclient_2eproto);
// ===================================================================

class PlayerMove::_Internal {
 public:
};

PlayerMove::PlayerMove(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlayerMove)
}
PlayerMove::PlayerMove(
    ::google::protobuf::Arena* arena, const PlayerMove& from)
    : PlayerMove(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE PlayerMove::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PlayerMove::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, chunk_x_),
           0,
           offsetof(Impl_, player_id_) -
               offsetof(Impl_, chunk_x_) +
               sizeof(Impl_::player_id_));
}
PlayerMove::~PlayerMove() {
  // @@protoc_insertion_point(destructor:PlayerMove)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PlayerMove::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void PlayerMove::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerMove)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.chunk_x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.player_id_) -
      reinterpret_cast<char*>(&_impl_.chunk_x_)) + sizeof(_impl_.player_id_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PlayerMove::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 0, 0, 2> PlayerMove::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_PlayerMove_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 chunk_x = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerMove, _impl_.chunk_x_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerMove, _impl_.chunk_x_)}},
    // int32 chunk_y = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerMove, _impl_.chunk_y_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerMove, _impl_.chunk_y_)}},
    // int32 chunk_z = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerMove, _impl_.chunk_z_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerMove, _impl_.chunk_z_)}},
    // float x = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerMove, _impl_.x_)}},
    // float y = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerMove, _impl_.y_)}},
    // float z = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerMove, _impl_.z_)}},
    // float yaw = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerMove, _impl_.yaw_)}},
    // float pitch = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerMove, _impl_.pitch_)}},
    // float head_yaw = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerMove, _impl_.head_yaw_)}},
    // uint32 player_id = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerMove, _impl_.player_id_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerMove, _impl_.player_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 chunk_x = 1;
    {PROTOBUF_FIELD_OFFSET(PlayerMove, _impl_.chunk_x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 chunk_y = 2;
    {PROTOBUF_FIELD_OFFSET(PlayerMove, _impl_.chunk_y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 chunk_z = 3;
    {PROTOBUF_FIELD_OFFSET(PlayerMove, _impl_.chunk_z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float x = 4;
    {PROTOBUF_FIELD_OFFSET(PlayerMove, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float y = 5;
    {PROTOBUF_FIELD_OFFSET(PlayerMove, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float z = 6;
    {PROTOBUF_FIELD_OFFSET(PlayerMove, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float yaw = 7;
    {PROTOBUF_FIELD_OFFSET(PlayerMove, _impl_.yaw_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float pitch = 8;
    {PROTOBUF_FIELD_OFFSET(PlayerMove, _impl_.pitch_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float head_yaw = 9;
    {PROTOBUF_FIELD_OFFSET(PlayerMove, _impl_.head_yaw_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // uint32 player_id = 10;
    {PROTOBUF_FIELD_OFFSET(PlayerMove, _impl_.player_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* PlayerMove::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerMove)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 chunk_x = 1;
  if (this->_internal_chunk_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_chunk_x(), target);
  }

  // int32 chunk_y = 2;
  if (this->_internal_chunk_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_chunk_y(), target);
  }

  // int32 chunk_z = 3;
  if (this->_internal_chunk_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_chunk_z(), target);
  }

  // float x = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_x(), target);
  }

  // float y = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_y(), target);
  }

  // float z = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_z(), target);
  }

  // float yaw = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  ::uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_yaw(), target);
  }

  // float pitch = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  ::uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        8, this->_internal_pitch(), target);
  }

  // float head_yaw = 9;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_head_yaw = this->_internal_head_yaw();
  ::uint32_t raw_head_yaw;
  memcpy(&raw_head_yaw, &tmp_head_yaw, sizeof(tmp_head_yaw));
  if (raw_head_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        9, this->_internal_head_yaw(), target);
  }

  // uint32 player_id = 10;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerMove)
  return target;
}

::size_t PlayerMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerMove)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chunk_x = 1;
  if (this->_internal_chunk_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_chunk_x());
  }

  // int32 chunk_y = 2;
  if (this->_internal_chunk_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_chunk_y());
  }

  // int32 chunk_z = 3;
  if (this->_internal_chunk_z() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_chunk_z());
  }

  // float x = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 5;
  }

  // float y = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 5;
  }

  // float z = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 5;
  }

  // float yaw = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  ::uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 5;
  }

  // float pitch = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  ::uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    total_size += 5;
  }

  // float head_yaw = 9;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_head_yaw = this->_internal_head_yaw();
  ::uint32_t raw_head_yaw;
  memcpy(&raw_head_yaw, &tmp_head_yaw, sizeof(tmp_head_yaw));
  if (raw_head_yaw != 0) {
    total_size += 5;
  }

  // uint32 player_id = 10;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PlayerMove::_class_data_ = {
    PlayerMove::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* PlayerMove::GetClassData() const {
  return &_class_data_;
}

void PlayerMove::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PlayerMove*>(&to_msg);
  auto& from = static_cast<const PlayerMove&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PlayerMove)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_chunk_x() != 0) {
    _this->_internal_set_chunk_x(from._internal_chunk_x());
  }
  if (from._internal_chunk_y() != 0) {
    _this->_internal_set_chunk_y(from._internal_chunk_y());
  }
  if (from._internal_chunk_z() != 0) {
    _this->_internal_set_chunk_z(from._internal_chunk_z());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  ::uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch = from._internal_pitch();
  ::uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    _this->_internal_set_pitch(from._internal_pitch());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_head_yaw = from._internal_head_yaw();
  ::uint32_t raw_head_yaw;
  memcpy(&raw_head_yaw, &tmp_head_yaw, sizeof(tmp_head_yaw));
  if (raw_head_yaw != 0) {
    _this->_internal_set_head_yaw(from._internal_head_yaw());
  }
  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerMove::CopyFrom(const PlayerMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PlayerMove::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* PlayerMove::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void PlayerMove::InternalSwap(PlayerMove* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerMove, _impl_.player_id_)
      + sizeof(PlayerMove::_impl_.player_id_)
      - PROTOBUF_FIELD_OFFSET(PlayerMove, _impl_.chunk_x_)>(
          reinterpret_cast<char*>(&_impl_.chunk_x_),
          reinterpret_cast<char*>(&other->_impl_.chunk_x_));
}

::google::protobuf::Metadata PlayerMove::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclient_2eproto_getter, &descriptor_table_proto_2fclient_2eproto_once,
      file_level_metadata_proto_2fclient_2eproto[0]);
}
// ===================================================================

class PlayerControlBlock::_Internal {
 public:
};

PlayerControlBlock::PlayerControlBlock(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlayerControlBlock)
}
PlayerControlBlock::PlayerControlBlock(
    ::google::protobuf::Arena* arena, const PlayerControlBlock& from)
    : PlayerControlBlock(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE PlayerControlBlock::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PlayerControlBlock::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, type_),
           0,
           offsetof(Impl_, block_z_) -
               offsetof(Impl_, type_) +
               sizeof(Impl_::block_z_));
}
PlayerControlBlock::~PlayerControlBlock() {
  // @@protoc_insertion_point(destructor:PlayerControlBlock)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PlayerControlBlock::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void PlayerControlBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerControlBlock)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.block_z_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.block_z_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PlayerControlBlock::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 0, 2> PlayerControlBlock::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_PlayerControlBlock_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerControlBlock, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerControlBlock, _impl_.type_)}},
    // int32 chunk_x = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerControlBlock, _impl_.chunk_x_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerControlBlock, _impl_.chunk_x_)}},
    // int32 chunk_y = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerControlBlock, _impl_.chunk_y_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerControlBlock, _impl_.chunk_y_)}},
    // int32 chunk_z = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerControlBlock, _impl_.chunk_z_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerControlBlock, _impl_.chunk_z_)}},
    // int32 block_x = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerControlBlock, _impl_.block_x_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerControlBlock, _impl_.block_x_)}},
    // int32 block_y = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerControlBlock, _impl_.block_y_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerControlBlock, _impl_.block_y_)}},
    // int32 block_z = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerControlBlock, _impl_.block_z_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerControlBlock, _impl_.block_z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 type = 1;
    {PROTOBUF_FIELD_OFFSET(PlayerControlBlock, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 chunk_x = 2;
    {PROTOBUF_FIELD_OFFSET(PlayerControlBlock, _impl_.chunk_x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 chunk_y = 3;
    {PROTOBUF_FIELD_OFFSET(PlayerControlBlock, _impl_.chunk_y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 chunk_z = 4;
    {PROTOBUF_FIELD_OFFSET(PlayerControlBlock, _impl_.chunk_z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 block_x = 5;
    {PROTOBUF_FIELD_OFFSET(PlayerControlBlock, _impl_.block_x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 block_y = 6;
    {PROTOBUF_FIELD_OFFSET(PlayerControlBlock, _impl_.block_y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 block_z = 7;
    {PROTOBUF_FIELD_OFFSET(PlayerControlBlock, _impl_.block_z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* PlayerControlBlock::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerControlBlock)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_type(), target);
  }

  // int32 chunk_x = 2;
  if (this->_internal_chunk_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_chunk_x(), target);
  }

  // int32 chunk_y = 3;
  if (this->_internal_chunk_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_chunk_y(), target);
  }

  // int32 chunk_z = 4;
  if (this->_internal_chunk_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_chunk_z(), target);
  }

  // int32 block_x = 5;
  if (this->_internal_block_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_block_x(), target);
  }

  // int32 block_y = 6;
  if (this->_internal_block_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_block_y(), target);
  }

  // int32 block_z = 7;
  if (this->_internal_block_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_block_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerControlBlock)
  return target;
}

::size_t PlayerControlBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerControlBlock)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_type());
  }

  // int32 chunk_x = 2;
  if (this->_internal_chunk_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_chunk_x());
  }

  // int32 chunk_y = 3;
  if (this->_internal_chunk_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_chunk_y());
  }

  // int32 chunk_z = 4;
  if (this->_internal_chunk_z() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_chunk_z());
  }

  // int32 block_x = 5;
  if (this->_internal_block_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_block_x());
  }

  // int32 block_y = 6;
  if (this->_internal_block_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_block_y());
  }

  // int32 block_z = 7;
  if (this->_internal_block_z() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_block_z());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PlayerControlBlock::_class_data_ = {
    PlayerControlBlock::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* PlayerControlBlock::GetClassData() const {
  return &_class_data_;
}

void PlayerControlBlock::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PlayerControlBlock*>(&to_msg);
  auto& from = static_cast<const PlayerControlBlock&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PlayerControlBlock)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_chunk_x() != 0) {
    _this->_internal_set_chunk_x(from._internal_chunk_x());
  }
  if (from._internal_chunk_y() != 0) {
    _this->_internal_set_chunk_y(from._internal_chunk_y());
  }
  if (from._internal_chunk_z() != 0) {
    _this->_internal_set_chunk_z(from._internal_chunk_z());
  }
  if (from._internal_block_x() != 0) {
    _this->_internal_set_block_x(from._internal_block_x());
  }
  if (from._internal_block_y() != 0) {
    _this->_internal_set_block_y(from._internal_block_y());
  }
  if (from._internal_block_z() != 0) {
    _this->_internal_set_block_z(from._internal_block_z());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerControlBlock::CopyFrom(const PlayerControlBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerControlBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PlayerControlBlock::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* PlayerControlBlock::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void PlayerControlBlock::InternalSwap(PlayerControlBlock* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerControlBlock, _impl_.block_z_)
      + sizeof(PlayerControlBlock::_impl_.block_z_)
      - PROTOBUF_FIELD_OFFSET(PlayerControlBlock, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::google::protobuf::Metadata PlayerControlBlock::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclient_2eproto_getter, &descriptor_table_proto_2fclient_2eproto_once,
      file_level_metadata_proto_2fclient_2eproto[1]);
}
// ===================================================================

class PlayerControlEntity::_Internal {
 public:
};

PlayerControlEntity::PlayerControlEntity(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlayerControlEntity)
}
PlayerControlEntity::PlayerControlEntity(
    ::google::protobuf::Arena* arena, const PlayerControlEntity& from)
    : PlayerControlEntity(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE PlayerControlEntity::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PlayerControlEntity::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, target_id_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, target_id_) +
               sizeof(Impl_::type_));
}
PlayerControlEntity::~PlayerControlEntity() {
  // @@protoc_insertion_point(destructor:PlayerControlEntity)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PlayerControlEntity::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void PlayerControlEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerControlEntity)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.target_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.target_id_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PlayerControlEntity::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> PlayerControlEntity::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_PlayerControlEntity_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int64 target_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(PlayerControlEntity, _impl_.target_id_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerControlEntity, _impl_.target_id_)}},
    // int32 type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerControlEntity, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerControlEntity, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 type = 1;
    {PROTOBUF_FIELD_OFFSET(PlayerControlEntity, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int64 target_id = 2;
    {PROTOBUF_FIELD_OFFSET(PlayerControlEntity, _impl_.target_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* PlayerControlEntity::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerControlEntity)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_type(), target);
  }

  // int64 target_id = 2;
  if (this->_internal_target_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_target_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerControlEntity)
  return target;
}

::size_t PlayerControlEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerControlEntity)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 target_id = 2;
  if (this->_internal_target_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_target_id());
  }

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PlayerControlEntity::_class_data_ = {
    PlayerControlEntity::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* PlayerControlEntity::GetClassData() const {
  return &_class_data_;
}

void PlayerControlEntity::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PlayerControlEntity*>(&to_msg);
  auto& from = static_cast<const PlayerControlEntity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PlayerControlEntity)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_target_id() != 0) {
    _this->_internal_set_target_id(from._internal_target_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerControlEntity::CopyFrom(const PlayerControlEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerControlEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PlayerControlEntity::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* PlayerControlEntity::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void PlayerControlEntity::InternalSwap(PlayerControlEntity* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerControlEntity, _impl_.type_)
      + sizeof(PlayerControlEntity::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(PlayerControlEntity, _impl_.target_id_)>(
          reinterpret_cast<char*>(&_impl_.target_id_),
          reinterpret_cast<char*>(&other->_impl_.target_id_));
}

::google::protobuf::Metadata PlayerControlEntity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclient_2eproto_getter, &descriptor_table_proto_2fclient_2eproto_once,
      file_level_metadata_proto_2fclient_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
