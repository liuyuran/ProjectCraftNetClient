// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/unittest_import_lite.proto

#include "google/protobuf/unittest_import_lite.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace protobuf_unittest_import {

inline constexpr ImportMessageLite::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        d_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ImportMessageLite::ImportMessageLite(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ImportMessageLiteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImportMessageLiteDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImportMessageLiteDefaultTypeInternal() {}
  union {
    ImportMessageLite _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImportMessageLiteDefaultTypeInternal _ImportMessageLite_default_instance_;
}  // namespace protobuf_unittest_import
namespace protobuf_unittest_import {
PROTOBUF_CONSTINIT const uint32_t ImportEnumLite_internal_data_[] = {
    196615u, 0u, };
bool ImportEnumLite_IsValid(int value) {
  return 7 <= value && value <= 9;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    ImportEnumLite_strings[3] = {};

static const char ImportEnumLite_names[] = {
    "IMPORT_LITE_BAR"
    "IMPORT_LITE_BAZ"
    "IMPORT_LITE_FOO"
};

static const ::google::protobuf::internal::EnumEntry ImportEnumLite_entries[] =
    {
        {{&ImportEnumLite_names[0], 15}, 8},
        {{&ImportEnumLite_names[15], 15}, 9},
        {{&ImportEnumLite_names[30], 15}, 7},
};

static const int ImportEnumLite_entries_by_number[] = {
    2,  // 7 -> IMPORT_LITE_FOO
    0,  // 8 -> IMPORT_LITE_BAR
    1,  // 9 -> IMPORT_LITE_BAZ
};

const std::string& ImportEnumLite_Name(ImportEnumLite value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          ImportEnumLite_entries, ImportEnumLite_entries_by_number,
          3, ImportEnumLite_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      ImportEnumLite_entries, ImportEnumLite_entries_by_number, 3,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : ImportEnumLite_strings[idx].get();
}

bool ImportEnumLite_Parse(absl::string_view name, ImportEnumLite* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      ImportEnumLite_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ImportEnumLite>(int_value);
  }
  return success;
}
// ===================================================================

class ImportMessageLite::_Internal {
 public:
  using HasBits = decltype(std::declval<ImportMessageLite>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ImportMessageLite, _impl_._has_bits_);
  static void set_has_d(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ImportMessageLite::ImportMessageLite(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest_import.ImportMessageLite)
}
ImportMessageLite::ImportMessageLite(
    ::google::protobuf::Arena* arena, const ImportMessageLite& from)
    : ImportMessageLite(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE ImportMessageLite::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ImportMessageLite::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.d_ = {};
}
ImportMessageLite::~ImportMessageLite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest_import.ImportMessageLite)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void ImportMessageLite::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ImportMessageLite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest_import.ImportMessageLite)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.d_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ImportMessageLite::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> ImportMessageLite::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ImportMessageLite, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ImportMessageLite_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // optional int32 d = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(ImportMessageLite, _impl_.d_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 d = 1;
    {PROTOBUF_FIELD_OFFSET(ImportMessageLite, _impl_.d_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* ImportMessageLite::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest_import.ImportMessageLite)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 d = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_d(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest_import.ImportMessageLite)
  return target;
}

::size_t ImportMessageLite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest_import.ImportMessageLite)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 d = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_d());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void ImportMessageLite::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ImportMessageLite*>(
      &from));
}

void ImportMessageLite::MergeFrom(const ImportMessageLite& from) {
  ImportMessageLite* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest_import.ImportMessageLite)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_d(from._internal_d());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ImportMessageLite::CopyFrom(const ImportMessageLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest_import.ImportMessageLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ImportMessageLite::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ImportMessageLite::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ImportMessageLite::InternalSwap(ImportMessageLite* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
        swap(_impl_.d_, other->_impl_.d_);
}

std::string ImportMessageLite::GetTypeName() const {
  return "protobuf_unittest_import.ImportMessageLite";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf_unittest_import
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
