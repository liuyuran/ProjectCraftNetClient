// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/unittest_features.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2funittest_5ffeatures_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2funittest_5ffeatures_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/descriptor.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_5ffeatures_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fprotobuf_2funittest_5ffeatures_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_google_2fprotobuf_2funittest_5ffeatures_2eproto;
namespace pb {
class TestFeatures;
struct TestFeaturesDefaultTypeInternal;
extern TestFeaturesDefaultTypeInternal _TestFeatures_default_instance_;
class TestFeatures_MessageFeature;
struct TestFeatures_MessageFeatureDefaultTypeInternal;
extern TestFeatures_MessageFeatureDefaultTypeInternal _TestFeatures_MessageFeature_default_instance_;
class TestMessage;
struct TestMessageDefaultTypeInternal;
extern TestMessageDefaultTypeInternal _TestMessage_default_instance_;
class TestMessage_Nested;
struct TestMessage_NestedDefaultTypeInternal;
extern TestMessage_NestedDefaultTypeInternal _TestMessage_Nested_default_instance_;
}  // namespace pb
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace pb {
enum TestFeatures_EnumFeature : int {
  TestFeatures_EnumFeature_TEST_ENUM_FEATURE_UNKNOWN = 0,
  TestFeatures_EnumFeature_ENUM_VALUE1 = 1,
  TestFeatures_EnumFeature_ENUM_VALUE2 = 2,
  TestFeatures_EnumFeature_ENUM_VALUE3 = 3,
  TestFeatures_EnumFeature_ENUM_VALUE4 = 4,
  TestFeatures_EnumFeature_ENUM_VALUE5 = 5,
};

bool TestFeatures_EnumFeature_IsValid(int value);
extern const uint32_t TestFeatures_EnumFeature_internal_data_[];
constexpr TestFeatures_EnumFeature TestFeatures_EnumFeature_EnumFeature_MIN = static_cast<TestFeatures_EnumFeature>(0);
constexpr TestFeatures_EnumFeature TestFeatures_EnumFeature_EnumFeature_MAX = static_cast<TestFeatures_EnumFeature>(5);
constexpr int TestFeatures_EnumFeature_EnumFeature_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
TestFeatures_EnumFeature_descriptor();
template <typename T>
const std::string& TestFeatures_EnumFeature_Name(T value) {
  static_assert(std::is_same<T, TestFeatures_EnumFeature>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EnumFeature_Name().");
  return TestFeatures_EnumFeature_Name(static_cast<TestFeatures_EnumFeature>(value));
}
template <>
inline const std::string& TestFeatures_EnumFeature_Name(TestFeatures_EnumFeature value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TestFeatures_EnumFeature_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool TestFeatures_EnumFeature_Parse(absl::string_view name, TestFeatures_EnumFeature* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TestFeatures_EnumFeature>(
      TestFeatures_EnumFeature_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class TestMessage_Nested final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:pb.TestMessage.Nested) */ {
 public:
  inline TestMessage_Nested() : TestMessage_Nested(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TestMessage_Nested(::google::protobuf::internal::ConstantInitialized);

  inline TestMessage_Nested(const TestMessage_Nested& from)
      : TestMessage_Nested(nullptr, from) {}
  TestMessage_Nested(TestMessage_Nested&& from) noexcept
    : TestMessage_Nested() {
    *this = ::std::move(from);
  }

  inline TestMessage_Nested& operator=(const TestMessage_Nested& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMessage_Nested& operator=(TestMessage_Nested&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMessage_Nested& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestMessage_Nested* internal_default_instance() {
    return reinterpret_cast<const TestMessage_Nested*>(
               &_TestMessage_Nested_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestMessage_Nested& a, TestMessage_Nested& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMessage_Nested* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMessage_Nested* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestMessage_Nested* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestMessage_Nested>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TestMessage_Nested& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TestMessage_Nested& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pb.TestMessage.Nested";
  }
  protected:
  explicit TestMessage_Nested(::google::protobuf::Arena* arena);
  TestMessage_Nested(::google::protobuf::Arena* arena, const TestMessage_Nested& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  static const int kTestNestedFieldNumber = 9997;
  static ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FeatureSet,
      ::google::protobuf::internal::MessageTypeTraits< ::pb::TestFeatures >, 11, false >
    test_nested;
  // @@protoc_insertion_point(class_scope:pb.TestMessage.Nested)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5ffeatures_2eproto;
};// -------------------------------------------------------------------

class TestMessage final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:pb.TestMessage) */ {
 public:
  inline TestMessage() : TestMessage(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TestMessage(::google::protobuf::internal::ConstantInitialized);

  inline TestMessage(const TestMessage& from)
      : TestMessage(nullptr, from) {}
  TestMessage(TestMessage&& from) noexcept
    : TestMessage() {
    *this = ::std::move(from);
  }

  inline TestMessage& operator=(const TestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMessage& operator=(TestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestMessage* internal_default_instance() {
    return reinterpret_cast<const TestMessage*>(
               &_TestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TestMessage& a, TestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestMessage>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TestMessage& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TestMessage& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pb.TestMessage";
  }
  protected:
  explicit TestMessage(::google::protobuf::Arena* arena);
  TestMessage(::google::protobuf::Arena* arena, const TestMessage& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Nested = TestMessage_Nested;

  // accessors -------------------------------------------------------

  static const int kTestMessageFieldNumber = 9998;
  static ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FeatureSet,
      ::google::protobuf::internal::MessageTypeTraits< ::pb::TestFeatures >, 11, false >
    test_message;
  // @@protoc_insertion_point(class_scope:pb.TestMessage)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5ffeatures_2eproto;
};// -------------------------------------------------------------------

class TestFeatures_MessageFeature final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.TestFeatures.MessageFeature) */ {
 public:
  inline TestFeatures_MessageFeature() : TestFeatures_MessageFeature(nullptr) {}
  ~TestFeatures_MessageFeature() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TestFeatures_MessageFeature(::google::protobuf::internal::ConstantInitialized);

  inline TestFeatures_MessageFeature(const TestFeatures_MessageFeature& from)
      : TestFeatures_MessageFeature(nullptr, from) {}
  TestFeatures_MessageFeature(TestFeatures_MessageFeature&& from) noexcept
    : TestFeatures_MessageFeature() {
    *this = ::std::move(from);
  }

  inline TestFeatures_MessageFeature& operator=(const TestFeatures_MessageFeature& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestFeatures_MessageFeature& operator=(TestFeatures_MessageFeature&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestFeatures_MessageFeature& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestFeatures_MessageFeature* internal_default_instance() {
    return reinterpret_cast<const TestFeatures_MessageFeature*>(
               &_TestFeatures_MessageFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TestFeatures_MessageFeature& a, TestFeatures_MessageFeature& b) {
    a.Swap(&b);
  }
  inline void Swap(TestFeatures_MessageFeature* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestFeatures_MessageFeature* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestFeatures_MessageFeature* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestFeatures_MessageFeature>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TestFeatures_MessageFeature& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TestFeatures_MessageFeature& from) {
    TestFeatures_MessageFeature::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TestFeatures_MessageFeature* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pb.TestFeatures.MessageFeature";
  }
  protected:
  explicit TestFeatures_MessageFeature(::google::protobuf::Arena* arena);
  TestFeatures_MessageFeature(::google::protobuf::Arena* arena, const TestFeatures_MessageFeature& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringFieldFieldNumber = 4,
    kBoolFieldFieldNumber = 1,
    kIntFieldFieldNumber = 2,
    kFloatFieldFieldNumber = 3,
  };
  // optional string string_field = 4;
  bool has_string_field() const;
  void clear_string_field() ;
  const std::string& string_field() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_string_field(Arg_&& arg, Args_... args);
  std::string* mutable_string_field();
  PROTOBUF_NODISCARD std::string* release_string_field();
  void set_allocated_string_field(std::string* value);

  private:
  const std::string& _internal_string_field() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_field(
      const std::string& value);
  std::string* _internal_mutable_string_field();

  public:
  // optional bool bool_field = 1;
  bool has_bool_field() const;
  void clear_bool_field() ;
  bool bool_field() const;
  void set_bool_field(bool value);

  private:
  bool _internal_bool_field() const;
  void _internal_set_bool_field(bool value);

  public:
  // optional int32 int_field = 2;
  bool has_int_field() const;
  void clear_int_field() ;
  ::int32_t int_field() const;
  void set_int_field(::int32_t value);

  private:
  ::int32_t _internal_int_field() const;
  void _internal_set_int_field(::int32_t value);

  public:
  // optional float float_field = 3;
  bool has_float_field() const;
  void clear_float_field() ;
  float float_field() const;
  void set_float_field(float value);

  private:
  float _internal_float_field() const;
  void _internal_set_float_field(float value);

  public:
  // @@protoc_insertion_point(class_scope:pb.TestFeatures.MessageFeature)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      51, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr string_field_;
    bool bool_field_;
    ::int32_t int_field_;
    float float_field_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5ffeatures_2eproto;
};// -------------------------------------------------------------------

class TestFeatures final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.TestFeatures) */ {
 public:
  inline TestFeatures() : TestFeatures(nullptr) {}
  ~TestFeatures() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TestFeatures(::google::protobuf::internal::ConstantInitialized);

  inline TestFeatures(const TestFeatures& from)
      : TestFeatures(nullptr, from) {}
  TestFeatures(TestFeatures&& from) noexcept
    : TestFeatures() {
    *this = ::std::move(from);
  }

  inline TestFeatures& operator=(const TestFeatures& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestFeatures& operator=(TestFeatures&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestFeatures& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestFeatures* internal_default_instance() {
    return reinterpret_cast<const TestFeatures*>(
               &_TestFeatures_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TestFeatures& a, TestFeatures& b) {
    a.Swap(&b);
  }
  inline void Swap(TestFeatures* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestFeatures* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestFeatures* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestFeatures>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TestFeatures& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TestFeatures& from) {
    TestFeatures::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TestFeatures* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pb.TestFeatures";
  }
  protected:
  explicit TestFeatures(::google::protobuf::Arena* arena);
  TestFeatures(::google::protobuf::Arena* arena, const TestFeatures& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using MessageFeature = TestFeatures_MessageFeature;

  using EnumFeature = TestFeatures_EnumFeature;
  static constexpr EnumFeature TEST_ENUM_FEATURE_UNKNOWN = TestFeatures_EnumFeature_TEST_ENUM_FEATURE_UNKNOWN;
  static constexpr EnumFeature ENUM_VALUE1 = TestFeatures_EnumFeature_ENUM_VALUE1;
  static constexpr EnumFeature ENUM_VALUE2 = TestFeatures_EnumFeature_ENUM_VALUE2;
  static constexpr EnumFeature ENUM_VALUE3 = TestFeatures_EnumFeature_ENUM_VALUE3;
  static constexpr EnumFeature ENUM_VALUE4 = TestFeatures_EnumFeature_ENUM_VALUE4;
  static constexpr EnumFeature ENUM_VALUE5 = TestFeatures_EnumFeature_ENUM_VALUE5;
  static inline bool EnumFeature_IsValid(int value) {
    return TestFeatures_EnumFeature_IsValid(value);
  }
  static constexpr EnumFeature EnumFeature_MIN = TestFeatures_EnumFeature_EnumFeature_MIN;
  static constexpr EnumFeature EnumFeature_MAX = TestFeatures_EnumFeature_EnumFeature_MAX;
  static constexpr int EnumFeature_ARRAYSIZE = TestFeatures_EnumFeature_EnumFeature_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* EnumFeature_descriptor() {
    return TestFeatures_EnumFeature_descriptor();
  }
  template <typename T>
  static inline const std::string& EnumFeature_Name(T value) {
    return TestFeatures_EnumFeature_Name(value);
  }
  static inline bool EnumFeature_Parse(absl::string_view name, EnumFeature* value) {
    return TestFeatures_EnumFeature_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStringSourceFeatureFieldNumber = 16,
    kMessageFieldFeatureFieldNumber = 13,
    kIntFileFeatureFieldNumber = 1,
    kIntExtensionRangeFeatureFieldNumber = 2,
    kIntMessageFeatureFieldNumber = 3,
    kIntFieldFeatureFieldNumber = 4,
    kIntOneofFeatureFieldNumber = 5,
    kIntEnumFeatureFieldNumber = 6,
    kIntEnumEntryFeatureFieldNumber = 7,
    kIntServiceFeatureFieldNumber = 8,
    kIntMethodFeatureFieldNumber = 9,
    kIntMultipleFeatureFieldNumber = 10,
    kBoolFieldFeatureFieldNumber = 11,
    kFloatFieldFeatureFieldNumber = 12,
    kEnumFieldFeatureFieldNumber = 14,
    kIntSourceFeatureFieldNumber = 15,
  };
  // optional string string_source_feature = 16 [retention = RETENTION_SOURCE, targets = TARGET_TYPE_FILE, targets = TARGET_TYPE_FIELD, targets = TARGET_TYPE_MESSAGE, targets = TARGET_TYPE_ENUM, targets = TARGET_TYPE_ENUM_ENTRY, targets = TARGET_TYPE_SERVICE, targets = TARGET_TYPE_METHOD, targets = TARGET_TYPE_ONEOF, targets = TARGET_TYPE_EXTENSION_RANGE, edition_defaults = {
  bool has_string_source_feature() const;
  void clear_string_source_feature() ;
  const std::string& string_source_feature() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_string_source_feature(Arg_&& arg, Args_... args);
  std::string* mutable_string_source_feature();
  PROTOBUF_NODISCARD std::string* release_string_source_feature();
  void set_allocated_string_source_feature(std::string* value);

  private:
  const std::string& _internal_string_source_feature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_source_feature(
      const std::string& value);
  std::string* _internal_mutable_string_source_feature();

  public:
  // optional .pb.TestFeatures.MessageFeature message_field_feature = 13 [retention = RETENTION_RUNTIME, targets = TARGET_TYPE_FIELD, edition_defaults = {
  bool has_message_field_feature() const;
  void clear_message_field_feature() ;
  const ::pb::TestFeatures_MessageFeature& message_field_feature() const;
  PROTOBUF_NODISCARD ::pb::TestFeatures_MessageFeature* release_message_field_feature();
  ::pb::TestFeatures_MessageFeature* mutable_message_field_feature();
  void set_allocated_message_field_feature(::pb::TestFeatures_MessageFeature* value);
  void unsafe_arena_set_allocated_message_field_feature(::pb::TestFeatures_MessageFeature* value);
  ::pb::TestFeatures_MessageFeature* unsafe_arena_release_message_field_feature();

  private:
  const ::pb::TestFeatures_MessageFeature& _internal_message_field_feature() const;
  ::pb::TestFeatures_MessageFeature* _internal_mutable_message_field_feature();

  public:
  // optional int32 int_file_feature = 1 [retention = RETENTION_RUNTIME, targets = TARGET_TYPE_FILE, edition_defaults = {
  bool has_int_file_feature() const;
  void clear_int_file_feature() ;
  ::int32_t int_file_feature() const;
  void set_int_file_feature(::int32_t value);

  private:
  ::int32_t _internal_int_file_feature() const;
  void _internal_set_int_file_feature(::int32_t value);

  public:
  // optional int32 int_extension_range_feature = 2 [retention = RETENTION_RUNTIME, targets = TARGET_TYPE_EXTENSION_RANGE, edition_defaults = {
  bool has_int_extension_range_feature() const;
  void clear_int_extension_range_feature() ;
  ::int32_t int_extension_range_feature() const;
  void set_int_extension_range_feature(::int32_t value);

  private:
  ::int32_t _internal_int_extension_range_feature() const;
  void _internal_set_int_extension_range_feature(::int32_t value);

  public:
  // optional int32 int_message_feature = 3 [retention = RETENTION_RUNTIME, targets = TARGET_TYPE_MESSAGE, edition_defaults = {
  bool has_int_message_feature() const;
  void clear_int_message_feature() ;
  ::int32_t int_message_feature() const;
  void set_int_message_feature(::int32_t value);

  private:
  ::int32_t _internal_int_message_feature() const;
  void _internal_set_int_message_feature(::int32_t value);

  public:
  // optional int32 int_field_feature = 4 [retention = RETENTION_RUNTIME, targets = TARGET_TYPE_FIELD, edition_defaults = {
  bool has_int_field_feature() const;
  void clear_int_field_feature() ;
  ::int32_t int_field_feature() const;
  void set_int_field_feature(::int32_t value);

  private:
  ::int32_t _internal_int_field_feature() const;
  void _internal_set_int_field_feature(::int32_t value);

  public:
  // optional int32 int_oneof_feature = 5 [retention = RETENTION_RUNTIME, targets = TARGET_TYPE_ONEOF, edition_defaults = {
  bool has_int_oneof_feature() const;
  void clear_int_oneof_feature() ;
  ::int32_t int_oneof_feature() const;
  void set_int_oneof_feature(::int32_t value);

  private:
  ::int32_t _internal_int_oneof_feature() const;
  void _internal_set_int_oneof_feature(::int32_t value);

  public:
  // optional int32 int_enum_feature = 6 [retention = RETENTION_RUNTIME, targets = TARGET_TYPE_ENUM, edition_defaults = {
  bool has_int_enum_feature() const;
  void clear_int_enum_feature() ;
  ::int32_t int_enum_feature() const;
  void set_int_enum_feature(::int32_t value);

  private:
  ::int32_t _internal_int_enum_feature() const;
  void _internal_set_int_enum_feature(::int32_t value);

  public:
  // optional int32 int_enum_entry_feature = 7 [retention = RETENTION_RUNTIME, targets = TARGET_TYPE_ENUM_ENTRY, edition_defaults = {
  bool has_int_enum_entry_feature() const;
  void clear_int_enum_entry_feature() ;
  ::int32_t int_enum_entry_feature() const;
  void set_int_enum_entry_feature(::int32_t value);

  private:
  ::int32_t _internal_int_enum_entry_feature() const;
  void _internal_set_int_enum_entry_feature(::int32_t value);

  public:
  // optional int32 int_service_feature = 8 [retention = RETENTION_RUNTIME, targets = TARGET_TYPE_SERVICE, edition_defaults = {
  bool has_int_service_feature() const;
  void clear_int_service_feature() ;
  ::int32_t int_service_feature() const;
  void set_int_service_feature(::int32_t value);

  private:
  ::int32_t _internal_int_service_feature() const;
  void _internal_set_int_service_feature(::int32_t value);

  public:
  // optional int32 int_method_feature = 9 [retention = RETENTION_RUNTIME, targets = TARGET_TYPE_METHOD, edition_defaults = {
  bool has_int_method_feature() const;
  void clear_int_method_feature() ;
  ::int32_t int_method_feature() const;
  void set_int_method_feature(::int32_t value);

  private:
  ::int32_t _internal_int_method_feature() const;
  void _internal_set_int_method_feature(::int32_t value);

  public:
  // optional int32 int_multiple_feature = 10 [retention = RETENTION_RUNTIME, targets = TARGET_TYPE_FILE, targets = TARGET_TYPE_FIELD, targets = TARGET_TYPE_MESSAGE, targets = TARGET_TYPE_ENUM, targets = TARGET_TYPE_ENUM_ENTRY, targets = TARGET_TYPE_SERVICE, targets = TARGET_TYPE_METHOD, targets = TARGET_TYPE_ONEOF, targets = TARGET_TYPE_EXTENSION_RANGE, edition_defaults = {
  bool has_int_multiple_feature() const;
  void clear_int_multiple_feature() ;
  ::int32_t int_multiple_feature() const;
  void set_int_multiple_feature(::int32_t value);

  private:
  ::int32_t _internal_int_multiple_feature() const;
  void _internal_set_int_multiple_feature(::int32_t value);

  public:
  // optional bool bool_field_feature = 11 [retention = RETENTION_RUNTIME, targets = TARGET_TYPE_FIELD, edition_defaults = {
  bool has_bool_field_feature() const;
  void clear_bool_field_feature() ;
  bool bool_field_feature() const;
  void set_bool_field_feature(bool value);

  private:
  bool _internal_bool_field_feature() const;
  void _internal_set_bool_field_feature(bool value);

  public:
  // optional float float_field_feature = 12 [retention = RETENTION_RUNTIME, targets = TARGET_TYPE_FIELD, edition_defaults = {
  bool has_float_field_feature() const;
  void clear_float_field_feature() ;
  float float_field_feature() const;
  void set_float_field_feature(float value);

  private:
  float _internal_float_field_feature() const;
  void _internal_set_float_field_feature(float value);

  public:
  // optional .pb.TestFeatures.EnumFeature enum_field_feature = 14 [retention = RETENTION_RUNTIME, targets = TARGET_TYPE_FIELD, edition_defaults = {
  bool has_enum_field_feature() const;
  void clear_enum_field_feature() ;
  ::pb::TestFeatures_EnumFeature enum_field_feature() const;
  void set_enum_field_feature(::pb::TestFeatures_EnumFeature value);

  private:
  ::pb::TestFeatures_EnumFeature _internal_enum_field_feature() const;
  void _internal_set_enum_field_feature(::pb::TestFeatures_EnumFeature value);

  public:
  // optional int32 int_source_feature = 15 [retention = RETENTION_SOURCE, targets = TARGET_TYPE_FILE, targets = TARGET_TYPE_FIELD, targets = TARGET_TYPE_MESSAGE, targets = TARGET_TYPE_ENUM, targets = TARGET_TYPE_ENUM_ENTRY, targets = TARGET_TYPE_SERVICE, targets = TARGET_TYPE_METHOD, targets = TARGET_TYPE_ONEOF, targets = TARGET_TYPE_EXTENSION_RANGE, edition_defaults = {
  bool has_int_source_feature() const;
  void clear_int_source_feature() ;
  ::int32_t int_source_feature() const;
  void set_int_source_feature(::int32_t value);

  private:
  ::int32_t _internal_int_source_feature() const;
  void _internal_set_int_source_feature(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:pb.TestFeatures)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 16, 2,
      61, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr string_source_feature_;
    ::pb::TestFeatures_MessageFeature* message_field_feature_;
    ::int32_t int_file_feature_;
    ::int32_t int_extension_range_feature_;
    ::int32_t int_message_feature_;
    ::int32_t int_field_feature_;
    ::int32_t int_oneof_feature_;
    ::int32_t int_enum_feature_;
    ::int32_t int_enum_entry_feature_;
    ::int32_t int_service_feature_;
    ::int32_t int_method_feature_;
    ::int32_t int_multiple_feature_;
    bool bool_field_feature_;
    float float_field_feature_;
    int enum_field_feature_;
    ::int32_t int_source_feature_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5ffeatures_2eproto;
};

// ===================================================================



static const int kTestFieldNumber = 9999;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FeatureSet,
    ::google::protobuf::internal::MessageTypeTraits< ::pb::TestFeatures >, 11, false >
  test;

// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TestMessage_Nested

// -------------------------------------------------------------------

// TestMessage

// -------------------------------------------------------------------

// TestFeatures_MessageFeature

// optional bool bool_field = 1;
inline bool TestFeatures_MessageFeature::has_bool_field() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TestFeatures_MessageFeature::clear_bool_field() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bool_field_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool TestFeatures_MessageFeature::bool_field() const {
  // @@protoc_insertion_point(field_get:pb.TestFeatures.MessageFeature.bool_field)
  return _internal_bool_field();
}
inline void TestFeatures_MessageFeature::set_bool_field(bool value) {
  _internal_set_bool_field(value);
  // @@protoc_insertion_point(field_set:pb.TestFeatures.MessageFeature.bool_field)
}
inline bool TestFeatures_MessageFeature::_internal_bool_field() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bool_field_;
}
inline void TestFeatures_MessageFeature::_internal_set_bool_field(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.bool_field_ = value;
}

// optional int32 int_field = 2;
inline bool TestFeatures_MessageFeature::has_int_field() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TestFeatures_MessageFeature::clear_int_field() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.int_field_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t TestFeatures_MessageFeature::int_field() const {
  // @@protoc_insertion_point(field_get:pb.TestFeatures.MessageFeature.int_field)
  return _internal_int_field();
}
inline void TestFeatures_MessageFeature::set_int_field(::int32_t value) {
  _internal_set_int_field(value);
  // @@protoc_insertion_point(field_set:pb.TestFeatures.MessageFeature.int_field)
}
inline ::int32_t TestFeatures_MessageFeature::_internal_int_field() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.int_field_;
}
inline void TestFeatures_MessageFeature::_internal_set_int_field(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.int_field_ = value;
}

// optional float float_field = 3;
inline bool TestFeatures_MessageFeature::has_float_field() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void TestFeatures_MessageFeature::clear_float_field() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.float_field_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float TestFeatures_MessageFeature::float_field() const {
  // @@protoc_insertion_point(field_get:pb.TestFeatures.MessageFeature.float_field)
  return _internal_float_field();
}
inline void TestFeatures_MessageFeature::set_float_field(float value) {
  _internal_set_float_field(value);
  // @@protoc_insertion_point(field_set:pb.TestFeatures.MessageFeature.float_field)
}
inline float TestFeatures_MessageFeature::_internal_float_field() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.float_field_;
}
inline void TestFeatures_MessageFeature::_internal_set_float_field(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.float_field_ = value;
}

// optional string string_field = 4;
inline bool TestFeatures_MessageFeature::has_string_field() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TestFeatures_MessageFeature::clear_string_field() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.string_field_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestFeatures_MessageFeature::string_field() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pb.TestFeatures.MessageFeature.string_field)
  return _internal_string_field();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TestFeatures_MessageFeature::set_string_field(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.string_field_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:pb.TestFeatures.MessageFeature.string_field)
}
inline std::string* TestFeatures_MessageFeature::mutable_string_field() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_string_field();
  // @@protoc_insertion_point(field_mutable:pb.TestFeatures.MessageFeature.string_field)
  return _s;
}
inline const std::string& TestFeatures_MessageFeature::_internal_string_field() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.string_field_.Get();
}
inline void TestFeatures_MessageFeature::_internal_set_string_field(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.string_field_.Set(value, GetArena());
}
inline std::string* TestFeatures_MessageFeature::_internal_mutable_string_field() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.string_field_.Mutable( GetArena());
}
inline std::string* TestFeatures_MessageFeature::release_string_field() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:pb.TestFeatures.MessageFeature.string_field)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.string_field_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.string_field_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TestFeatures_MessageFeature::set_allocated_string_field(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.string_field_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.string_field_.IsDefault()) {
          _impl_.string_field_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.TestFeatures.MessageFeature.string_field)
}

// -------------------------------------------------------------------

// TestFeatures

// optional int32 int_file_feature = 1 [retention = RETENTION_RUNTIME, targets = TARGET_TYPE_FILE, edition_defaults = {
inline bool TestFeatures::has_int_file_feature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TestFeatures::clear_int_file_feature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.int_file_feature_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t TestFeatures::int_file_feature() const {
  // @@protoc_insertion_point(field_get:pb.TestFeatures.int_file_feature)
  return _internal_int_file_feature();
}
inline void TestFeatures::set_int_file_feature(::int32_t value) {
  _internal_set_int_file_feature(value);
  // @@protoc_insertion_point(field_set:pb.TestFeatures.int_file_feature)
}
inline ::int32_t TestFeatures::_internal_int_file_feature() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.int_file_feature_;
}
inline void TestFeatures::_internal_set_int_file_feature(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.int_file_feature_ = value;
}

// optional int32 int_extension_range_feature = 2 [retention = RETENTION_RUNTIME, targets = TARGET_TYPE_EXTENSION_RANGE, edition_defaults = {
inline bool TestFeatures::has_int_extension_range_feature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void TestFeatures::clear_int_extension_range_feature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.int_extension_range_feature_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t TestFeatures::int_extension_range_feature() const {
  // @@protoc_insertion_point(field_get:pb.TestFeatures.int_extension_range_feature)
  return _internal_int_extension_range_feature();
}
inline void TestFeatures::set_int_extension_range_feature(::int32_t value) {
  _internal_set_int_extension_range_feature(value);
  // @@protoc_insertion_point(field_set:pb.TestFeatures.int_extension_range_feature)
}
inline ::int32_t TestFeatures::_internal_int_extension_range_feature() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.int_extension_range_feature_;
}
inline void TestFeatures::_internal_set_int_extension_range_feature(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.int_extension_range_feature_ = value;
}

// optional int32 int_message_feature = 3 [retention = RETENTION_RUNTIME, targets = TARGET_TYPE_MESSAGE, edition_defaults = {
inline bool TestFeatures::has_int_message_feature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void TestFeatures::clear_int_message_feature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.int_message_feature_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t TestFeatures::int_message_feature() const {
  // @@protoc_insertion_point(field_get:pb.TestFeatures.int_message_feature)
  return _internal_int_message_feature();
}
inline void TestFeatures::set_int_message_feature(::int32_t value) {
  _internal_set_int_message_feature(value);
  // @@protoc_insertion_point(field_set:pb.TestFeatures.int_message_feature)
}
inline ::int32_t TestFeatures::_internal_int_message_feature() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.int_message_feature_;
}
inline void TestFeatures::_internal_set_int_message_feature(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.int_message_feature_ = value;
}

// optional int32 int_field_feature = 4 [retention = RETENTION_RUNTIME, targets = TARGET_TYPE_FIELD, edition_defaults = {
inline bool TestFeatures::has_int_field_feature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void TestFeatures::clear_int_field_feature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.int_field_feature_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t TestFeatures::int_field_feature() const {
  // @@protoc_insertion_point(field_get:pb.TestFeatures.int_field_feature)
  return _internal_int_field_feature();
}
inline void TestFeatures::set_int_field_feature(::int32_t value) {
  _internal_set_int_field_feature(value);
  // @@protoc_insertion_point(field_set:pb.TestFeatures.int_field_feature)
}
inline ::int32_t TestFeatures::_internal_int_field_feature() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.int_field_feature_;
}
inline void TestFeatures::_internal_set_int_field_feature(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.int_field_feature_ = value;
}

// optional int32 int_oneof_feature = 5 [retention = RETENTION_RUNTIME, targets = TARGET_TYPE_ONEOF, edition_defaults = {
inline bool TestFeatures::has_int_oneof_feature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void TestFeatures::clear_int_oneof_feature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.int_oneof_feature_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t TestFeatures::int_oneof_feature() const {
  // @@protoc_insertion_point(field_get:pb.TestFeatures.int_oneof_feature)
  return _internal_int_oneof_feature();
}
inline void TestFeatures::set_int_oneof_feature(::int32_t value) {
  _internal_set_int_oneof_feature(value);
  // @@protoc_insertion_point(field_set:pb.TestFeatures.int_oneof_feature)
}
inline ::int32_t TestFeatures::_internal_int_oneof_feature() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.int_oneof_feature_;
}
inline void TestFeatures::_internal_set_int_oneof_feature(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.int_oneof_feature_ = value;
}

// optional int32 int_enum_feature = 6 [retention = RETENTION_RUNTIME, targets = TARGET_TYPE_ENUM, edition_defaults = {
inline bool TestFeatures::has_int_enum_feature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void TestFeatures::clear_int_enum_feature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.int_enum_feature_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t TestFeatures::int_enum_feature() const {
  // @@protoc_insertion_point(field_get:pb.TestFeatures.int_enum_feature)
  return _internal_int_enum_feature();
}
inline void TestFeatures::set_int_enum_feature(::int32_t value) {
  _internal_set_int_enum_feature(value);
  // @@protoc_insertion_point(field_set:pb.TestFeatures.int_enum_feature)
}
inline ::int32_t TestFeatures::_internal_int_enum_feature() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.int_enum_feature_;
}
inline void TestFeatures::_internal_set_int_enum_feature(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.int_enum_feature_ = value;
}

// optional int32 int_enum_entry_feature = 7 [retention = RETENTION_RUNTIME, targets = TARGET_TYPE_ENUM_ENTRY, edition_defaults = {
inline bool TestFeatures::has_int_enum_entry_feature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void TestFeatures::clear_int_enum_entry_feature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.int_enum_entry_feature_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int32_t TestFeatures::int_enum_entry_feature() const {
  // @@protoc_insertion_point(field_get:pb.TestFeatures.int_enum_entry_feature)
  return _internal_int_enum_entry_feature();
}
inline void TestFeatures::set_int_enum_entry_feature(::int32_t value) {
  _internal_set_int_enum_entry_feature(value);
  // @@protoc_insertion_point(field_set:pb.TestFeatures.int_enum_entry_feature)
}
inline ::int32_t TestFeatures::_internal_int_enum_entry_feature() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.int_enum_entry_feature_;
}
inline void TestFeatures::_internal_set_int_enum_entry_feature(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.int_enum_entry_feature_ = value;
}

// optional int32 int_service_feature = 8 [retention = RETENTION_RUNTIME, targets = TARGET_TYPE_SERVICE, edition_defaults = {
inline bool TestFeatures::has_int_service_feature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void TestFeatures::clear_int_service_feature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.int_service_feature_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t TestFeatures::int_service_feature() const {
  // @@protoc_insertion_point(field_get:pb.TestFeatures.int_service_feature)
  return _internal_int_service_feature();
}
inline void TestFeatures::set_int_service_feature(::int32_t value) {
  _internal_set_int_service_feature(value);
  // @@protoc_insertion_point(field_set:pb.TestFeatures.int_service_feature)
}
inline ::int32_t TestFeatures::_internal_int_service_feature() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.int_service_feature_;
}
inline void TestFeatures::_internal_set_int_service_feature(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.int_service_feature_ = value;
}

// optional int32 int_method_feature = 9 [retention = RETENTION_RUNTIME, targets = TARGET_TYPE_METHOD, edition_defaults = {
inline bool TestFeatures::has_int_method_feature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void TestFeatures::clear_int_method_feature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.int_method_feature_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::int32_t TestFeatures::int_method_feature() const {
  // @@protoc_insertion_point(field_get:pb.TestFeatures.int_method_feature)
  return _internal_int_method_feature();
}
inline void TestFeatures::set_int_method_feature(::int32_t value) {
  _internal_set_int_method_feature(value);
  // @@protoc_insertion_point(field_set:pb.TestFeatures.int_method_feature)
}
inline ::int32_t TestFeatures::_internal_int_method_feature() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.int_method_feature_;
}
inline void TestFeatures::_internal_set_int_method_feature(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.int_method_feature_ = value;
}

// optional int32 int_multiple_feature = 10 [retention = RETENTION_RUNTIME, targets = TARGET_TYPE_FILE, targets = TARGET_TYPE_FIELD, targets = TARGET_TYPE_MESSAGE, targets = TARGET_TYPE_ENUM, targets = TARGET_TYPE_ENUM_ENTRY, targets = TARGET_TYPE_SERVICE, targets = TARGET_TYPE_METHOD, targets = TARGET_TYPE_ONEOF, targets = TARGET_TYPE_EXTENSION_RANGE, edition_defaults = {
inline bool TestFeatures::has_int_multiple_feature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void TestFeatures::clear_int_multiple_feature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.int_multiple_feature_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::int32_t TestFeatures::int_multiple_feature() const {
  // @@protoc_insertion_point(field_get:pb.TestFeatures.int_multiple_feature)
  return _internal_int_multiple_feature();
}
inline void TestFeatures::set_int_multiple_feature(::int32_t value) {
  _internal_set_int_multiple_feature(value);
  // @@protoc_insertion_point(field_set:pb.TestFeatures.int_multiple_feature)
}
inline ::int32_t TestFeatures::_internal_int_multiple_feature() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.int_multiple_feature_;
}
inline void TestFeatures::_internal_set_int_multiple_feature(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.int_multiple_feature_ = value;
}

// optional bool bool_field_feature = 11 [retention = RETENTION_RUNTIME, targets = TARGET_TYPE_FIELD, edition_defaults = {
inline bool TestFeatures::has_bool_field_feature() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void TestFeatures::clear_bool_field_feature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bool_field_feature_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool TestFeatures::bool_field_feature() const {
  // @@protoc_insertion_point(field_get:pb.TestFeatures.bool_field_feature)
  return _internal_bool_field_feature();
}
inline void TestFeatures::set_bool_field_feature(bool value) {
  _internal_set_bool_field_feature(value);
  // @@protoc_insertion_point(field_set:pb.TestFeatures.bool_field_feature)
}
inline bool TestFeatures::_internal_bool_field_feature() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bool_field_feature_;
}
inline void TestFeatures::_internal_set_bool_field_feature(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.bool_field_feature_ = value;
}

// optional float float_field_feature = 12 [retention = RETENTION_RUNTIME, targets = TARGET_TYPE_FIELD, edition_defaults = {
inline bool TestFeatures::has_float_field_feature() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void TestFeatures::clear_float_field_feature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.float_field_feature_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline float TestFeatures::float_field_feature() const {
  // @@protoc_insertion_point(field_get:pb.TestFeatures.float_field_feature)
  return _internal_float_field_feature();
}
inline void TestFeatures::set_float_field_feature(float value) {
  _internal_set_float_field_feature(value);
  // @@protoc_insertion_point(field_set:pb.TestFeatures.float_field_feature)
}
inline float TestFeatures::_internal_float_field_feature() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.float_field_feature_;
}
inline void TestFeatures::_internal_set_float_field_feature(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.float_field_feature_ = value;
}

// optional .pb.TestFeatures.MessageFeature message_field_feature = 13 [retention = RETENTION_RUNTIME, targets = TARGET_TYPE_FIELD, edition_defaults = {
inline bool TestFeatures::has_message_field_feature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.message_field_feature_ != nullptr);
  return value;
}
inline void TestFeatures::clear_message_field_feature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.message_field_feature_ != nullptr) _impl_.message_field_feature_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::pb::TestFeatures_MessageFeature& TestFeatures::_internal_message_field_feature() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::pb::TestFeatures_MessageFeature* p = _impl_.message_field_feature_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::TestFeatures_MessageFeature&>(::pb::_TestFeatures_MessageFeature_default_instance_);
}
inline const ::pb::TestFeatures_MessageFeature& TestFeatures::message_field_feature() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pb.TestFeatures.message_field_feature)
  return _internal_message_field_feature();
}
inline void TestFeatures::unsafe_arena_set_allocated_message_field_feature(::pb::TestFeatures_MessageFeature* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.message_field_feature_);
  }
  _impl_.message_field_feature_ = reinterpret_cast<::pb::TestFeatures_MessageFeature*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.TestFeatures.message_field_feature)
}
inline ::pb::TestFeatures_MessageFeature* TestFeatures::release_message_field_feature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::pb::TestFeatures_MessageFeature* released = _impl_.message_field_feature_;
  _impl_.message_field_feature_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::pb::TestFeatures_MessageFeature* TestFeatures::unsafe_arena_release_message_field_feature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:pb.TestFeatures.message_field_feature)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::pb::TestFeatures_MessageFeature* temp = _impl_.message_field_feature_;
  _impl_.message_field_feature_ = nullptr;
  return temp;
}
inline ::pb::TestFeatures_MessageFeature* TestFeatures::_internal_mutable_message_field_feature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.message_field_feature_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::TestFeatures_MessageFeature>(GetArena());
    _impl_.message_field_feature_ = reinterpret_cast<::pb::TestFeatures_MessageFeature*>(p);
  }
  return _impl_.message_field_feature_;
}
inline ::pb::TestFeatures_MessageFeature* TestFeatures::mutable_message_field_feature() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::pb::TestFeatures_MessageFeature* _msg = _internal_mutable_message_field_feature();
  // @@protoc_insertion_point(field_mutable:pb.TestFeatures.message_field_feature)
  return _msg;
}
inline void TestFeatures::set_allocated_message_field_feature(::pb::TestFeatures_MessageFeature* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::pb::TestFeatures_MessageFeature*>(_impl_.message_field_feature_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::pb::TestFeatures_MessageFeature*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.message_field_feature_ = reinterpret_cast<::pb::TestFeatures_MessageFeature*>(value);
  // @@protoc_insertion_point(field_set_allocated:pb.TestFeatures.message_field_feature)
}

// optional .pb.TestFeatures.EnumFeature enum_field_feature = 14 [retention = RETENTION_RUNTIME, targets = TARGET_TYPE_FIELD, edition_defaults = {
inline bool TestFeatures::has_enum_field_feature() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void TestFeatures::clear_enum_field_feature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.enum_field_feature_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::pb::TestFeatures_EnumFeature TestFeatures::enum_field_feature() const {
  // @@protoc_insertion_point(field_get:pb.TestFeatures.enum_field_feature)
  return _internal_enum_field_feature();
}
inline void TestFeatures::set_enum_field_feature(::pb::TestFeatures_EnumFeature value) {
  _internal_set_enum_field_feature(value);
  // @@protoc_insertion_point(field_set:pb.TestFeatures.enum_field_feature)
}
inline ::pb::TestFeatures_EnumFeature TestFeatures::_internal_enum_field_feature() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::pb::TestFeatures_EnumFeature>(_impl_.enum_field_feature_);
}
inline void TestFeatures::_internal_set_enum_field_feature(::pb::TestFeatures_EnumFeature value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::pb::TestFeatures_EnumFeature_IsValid(value));
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.enum_field_feature_ = value;
}

// optional int32 int_source_feature = 15 [retention = RETENTION_SOURCE, targets = TARGET_TYPE_FILE, targets = TARGET_TYPE_FIELD, targets = TARGET_TYPE_MESSAGE, targets = TARGET_TYPE_ENUM, targets = TARGET_TYPE_ENUM_ENTRY, targets = TARGET_TYPE_SERVICE, targets = TARGET_TYPE_METHOD, targets = TARGET_TYPE_ONEOF, targets = TARGET_TYPE_EXTENSION_RANGE, edition_defaults = {
inline bool TestFeatures::has_int_source_feature() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void TestFeatures::clear_int_source_feature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.int_source_feature_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::int32_t TestFeatures::int_source_feature() const {
  // @@protoc_insertion_point(field_get:pb.TestFeatures.int_source_feature)
  return _internal_int_source_feature();
}
inline void TestFeatures::set_int_source_feature(::int32_t value) {
  _internal_set_int_source_feature(value);
  // @@protoc_insertion_point(field_set:pb.TestFeatures.int_source_feature)
}
inline ::int32_t TestFeatures::_internal_int_source_feature() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.int_source_feature_;
}
inline void TestFeatures::_internal_set_int_source_feature(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.int_source_feature_ = value;
}

// optional string string_source_feature = 16 [retention = RETENTION_SOURCE, targets = TARGET_TYPE_FILE, targets = TARGET_TYPE_FIELD, targets = TARGET_TYPE_MESSAGE, targets = TARGET_TYPE_ENUM, targets = TARGET_TYPE_ENUM_ENTRY, targets = TARGET_TYPE_SERVICE, targets = TARGET_TYPE_METHOD, targets = TARGET_TYPE_ONEOF, targets = TARGET_TYPE_EXTENSION_RANGE, edition_defaults = {
inline bool TestFeatures::has_string_source_feature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TestFeatures::clear_string_source_feature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.string_source_feature_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestFeatures::string_source_feature() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:pb.TestFeatures.string_source_feature)
  return _internal_string_source_feature();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TestFeatures::set_string_source_feature(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.string_source_feature_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:pb.TestFeatures.string_source_feature)
}
inline std::string* TestFeatures::mutable_string_source_feature() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_string_source_feature();
  // @@protoc_insertion_point(field_mutable:pb.TestFeatures.string_source_feature)
  return _s;
}
inline const std::string& TestFeatures::_internal_string_source_feature() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.string_source_feature_.Get();
}
inline void TestFeatures::_internal_set_string_source_feature(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.string_source_feature_.Set(value, GetArena());
}
inline std::string* TestFeatures::_internal_mutable_string_source_feature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.string_source_feature_.Mutable( GetArena());
}
inline std::string* TestFeatures::release_string_source_feature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:pb.TestFeatures.string_source_feature)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.string_source_feature_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.string_source_feature_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TestFeatures::set_allocated_string_source_feature(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.string_source_feature_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.string_source_feature_.IsDefault()) {
          _impl_.string_source_feature_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.TestFeatures.string_source_feature)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace pb


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::pb::TestFeatures_EnumFeature> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::pb::TestFeatures_EnumFeature>() {
  return ::pb::TestFeatures_EnumFeature_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2funittest_5ffeatures_2eproto_2epb_2eh
